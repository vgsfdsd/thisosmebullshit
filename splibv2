local MarketplaceService = game:GetService("MarketplaceService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local PlayerMouse = Player:GetMouse()

local splib = {
	Themes = {
		Red = {
			["Color Hub 1"] = ColorSequence.new({
				ColorSequenceKeypoint.new(0.00, Color3.fromRGB(13, 13, 13)),
				ColorSequenceKeypoint.new(0.50, Color3.fromRGB(32.5, 32.5, 32.5)),
				ColorSequenceKeypoint.new(1.00, Color3.fromRGB(13, 13, 13))
			}),
			["Color Hub 2"] = Color3.fromRGB(30, 30, 30),
			["Color Stroke"] = Color3.fromRGB(13, 13, 13),
			["Color Theme"] = Color3.fromRGB(0, 162, 255),
			["Color Text"] = Color3.fromRGB(193, 61, 66),
			["Color Dark Text"] = Color3.fromRGB(180, 180, 180)
		},
		Darker = {
			["Color Hub 1"] = ColorSequence.new({
				ColorSequenceKeypoint.new(0.00, Color3.fromRGB(25, 25, 25)),
				ColorSequenceKeypoint.new(0.50, Color3.fromRGB(32.5, 32.5, 32.5)),
				ColorSequenceKeypoint.new(1.00, Color3.fromRGB(25, 25, 25))
			}),
			["Color Hub 2"] = Color3.fromRGB(30, 30, 30),
			["Color Stroke"] = Color3.fromRGB(40, 40, 40),
			["Color Theme"] = Color3.fromRGB(88, 101, 242),
			["Color Text"] = Color3.fromRGB(243, 243, 243),
			["Color Dark Text"] = Color3.fromRGB(180, 180, 180)
		},
		Dark = {
			["Color Hub 1"] = ColorSequence.new({
				ColorSequenceKeypoint.new(0.00, Color3.fromRGB(40, 40, 40)),
				ColorSequenceKeypoint.new(0.50, Color3.fromRGB(47.5, 47.5, 47.5)),
				ColorSequenceKeypoint.new(1.00, Color3.fromRGB(40, 40, 40))
			}),
			["Color Hub 2"] = Color3.fromRGB(45, 45, 45),
			["Color Stroke"] = Color3.fromRGB(65, 65, 65),
			["Color Theme"] = Color3.fromRGB(65, 150, 255),
			["Color Text"] = Color3.fromRGB(245, 245, 245),
			["Color Dark Text"] = Color3.fromRGB(190, 190, 190)
		},
		Purple = {
			["Color Hub 1"] = ColorSequence.new({
				ColorSequenceKeypoint.new(0.00, Color3.fromRGB(27.5, 25)),
				ColorSequenceKeypoint.new(0.50, Color3.fromRGB(32.5, 32.5, 32.5)),
				ColorSequenceKeypoint.new(1.00, Color3.fromRGB(27.5, 25, 30))
			}),
			["Color Hub 2"] = Color3.fromRGB(30, 30, 30),
			["Color Stroke"] = Color3.fromRGB(40, 40, 40),
			["Color Theme"] = Color3.fromRGB(150, 0, 255),
			["Color Text"] = Color3.fromRGB(150, 0, 255),
			["Color Dark Text"] = Color3.fromRGB(150, 0, 255)
		},
		Green = {
			["Color Hub 1"] = ColorSequence.new({
				ColorSequenceKeypoint.new(0.00, Color3.fromRGB(15, 25, 15)),
				ColorSequenceKeypoint.new(0.50, Color3.fromRGB(20, 35, 20)),
				ColorSequenceKeypoint.new(1.00, Color3.fromRGB(15, 25, 15))
			}),
			["Color Hub 2"] = Color3.fromRGB(25, 35, 25),
			["Color Stroke"] = Color3.fromRGB(20, 40, 20),
			["Color Theme"] = Color3.fromRGB(0, 200, 100),
			["Color Text"] = Color3.fromRGB(0, 255, 128),
			["Color Dark Text"] = Color3.fromRGB(180, 255, 210)
		},
		Orange = {
			["Color Hub 1"] = ColorSequence.new({
				ColorSequenceKeypoint.new(0.00, Color3.fromRGB(30, 20, 10)),
				ColorSequenceKeypoint.new(0.50, Color3.fromRGB(45, 30, 15)),
				ColorSequenceKeypoint.new(1.00, Color3.fromRGB(30, 20, 10))
			}),
			["Color Hub 2"] = Color3.fromRGB(50, 30, 20),
			["Color Stroke"] = Color3.fromRGB(70, 40, 25),
			["Color Theme"] = Color3.fromRGB(255, 140, 0),
			["Color Text"] = Color3.fromRGB(255, 165, 0),
			["Color Dark Text"] = Color3.fromRGB(255, 200, 100)
		},
		Pink = {
			["Color Hub 1"] = ColorSequence.new({
				ColorSequenceKeypoint.new(0.00, Color3.fromRGB(30, 20, 25)),
				ColorSequenceKeypoint.new(0.50, Color3.fromRGB(45, 30, 40)),
				ColorSequenceKeypoint.new(1.00, Color3.fromRGB(30, 20, 25))
			}),
			["Color Hub 2"] = Color3.fromRGB(45, 25, 35),
			["Color Stroke"] = Color3.fromRGB(70, 40, 60),
			["Color Theme"] = Color3.fromRGB(255, 105, 180),
			["Color Text"] = Color3.fromRGB(255, 182, 193),
			["Color Dark Text"] = Color3.fromRGB(255, 210, 220)
		},
		Gold = {
			["Color Hub 1"] = ColorSequence.new({
				ColorSequenceKeypoint.new(0.00, Color3.fromRGB(40, 35, 20)),
				ColorSequenceKeypoint.new(0.50, Color3.fromRGB(60, 55, 30)),
				ColorSequenceKeypoint.new(1.00, Color3.fromRGB(40, 35, 20))
			}),
			["Color Hub 2"] = Color3.fromRGB(65, 60, 35),
			["Color Stroke"] = Color3.fromRGB(80, 70, 40),
			["Color Theme"] = Color3.fromRGB(255, 215, 0),
			["Color Text"] = Color3.fromRGB(255, 223, 100),
			["Color Dark Text"] = Color3.fromRGB(255, 240, 150)
		},
		Cyan = {
			["Color Hub 1"] = ColorSequence.new({
				ColorSequenceKeypoint.new(0.00, Color3.fromRGB(20, 30, 35)),
				ColorSequenceKeypoint.new(0.50, Color3.fromRGB(30, 45, 50)),
				ColorSequenceKeypoint.new(1.00, Color3.fromRGB(20, 30, 35))
			}),
			["Color Hub 2"] = Color3.fromRGB(35, 50, 55),
			["Color Stroke"] = Color3.fromRGB(40, 70, 75),
			["Color Theme"] = Color3.fromRGB(0, 255, 255),
			["Color Text"] = Color3.fromRGB(100, 255, 255),
			["Color Dark Text"] = Color3.fromRGB(180, 255, 255)
        },
		NeonBlue = {
			["Color Hub 1"] = ColorSequence.new({
				ColorSequenceKeypoint.new(0.00, Color3.fromRGB(10, 10, 20)),
				ColorSequenceKeypoint.new(0.50, Color3.fromRGB(20, 20, 40)),
				ColorSequenceKeypoint.new(1.00, Color3.fromRGB(10, 10, 20))
			}),
			["Color Hub 2"] = Color3.fromRGB(15, 15, 30),
			["Color Stroke"] = Color3.fromRGB(0, 100, 200),
			["Color Theme"] = Color3.fromRGB(0, 200, 255),
			["Color Text"] = Color3.fromRGB(200, 240, 255),
			["Color Dark Text"] = Color3.fromRGB(150, 200, 220)
		},
		Sunset = {
			["Color Hub 1"] = ColorSequence.new({
				ColorSequenceKeypoint.new(0.00, Color3.fromRGB(30, 15, 20)),
				ColorSequenceKeypoint.new(0.50, Color3.fromRGB(50, 25, 30)),
				ColorSequenceKeypoint.new(1.00, Color3.fromRGB(30, 15, 20))
			}),
			["Color Hub 2"] = Color3.fromRGB(40, 20, 25),
			["Color Stroke"] = Color3.fromRGB(60, 30, 35),
			["Color Theme"] = Color3.fromRGB(255, 94, 77),
			["Color Text"] = Color3.fromRGB(255, 200, 180),
			["Color Dark Text"] = Color3.fromRGB(200, 150, 140)
		},
		Ocean = {
			["Color Hub 1"] = ColorSequence.new({
				ColorSequenceKeypoint.new(0.00, Color3.fromRGB(10, 25, 30)),
				ColorSequenceKeypoint.new(0.50, Color3.fromRGB(20, 50, 60)),
				ColorSequenceKeypoint.new(1.00, Color3.fromRGB(10, 25, 30))
			}),
			["Color Hub 2"] = Color3.fromRGB(15, 40, 50),
			["Color Stroke"] = Color3.fromRGB(0, 100, 110),
			["Color Theme"] = Color3.fromRGB(0, 180, 200),
			["Color Text"] = Color3.fromRGB(200, 255, 255),
			["Color Dark Text"] = Color3.fromRGB(150, 200, 200)
		},
		RoseGold = {
			["Color Hub 1"] = ColorSequence.new({
				ColorSequenceKeypoint.new(0.00, Color3.fromRGB(25, 20, 20)),
				ColorSequenceKeypoint.new(0.50, Color3.fromRGB(35, 28, 28)),
				ColorSequenceKeypoint.new(1.00, Color3.fromRGB(25, 20, 20))
			}),
			["Color Hub 2"] = Color3.fromRGB(30, 25, 25),
			["Color Stroke"] = Color3.fromRGB(150, 90, 80),
			["Color Theme"] = Color3.fromRGB(183, 110, 121),
			["Color Text"] = Color3.fromRGB(255, 230, 230),
			["Color Dark Text"] = Color3.fromRGB(200, 190, 190)
		},
		Matrix = {
			["Color Hub 1"] = ColorSequence.new({
				ColorSequenceKeypoint.new(0.00, Color3.fromRGB(0, 0, 0)),
				ColorSequenceKeypoint.new(0.50, Color3.fromRGB(10, 10, 10)),
				ColorSequenceKeypoint.new(1.00, Color3.fromRGB(0, 0, 0))
			}),
			["Color Hub 2"] = Color3.fromRGB(5, 5, 5),
			["Color Stroke"] = Color3.fromRGB(0, 50, 0),
			["Color Theme"] = Color3.fromRGB(0, 255, 0),
			["Color Text"] = Color3.fromRGB(0, 255, 100),
			["Color Dark Text"] = Color3.fromRGB(0, 150, 0)
		}
	},
	Info = {
		Version = "1.1.5"
	},
	Save = {
		UISize = {550, 380},
		TabSize = 160,
		Theme = "Red"
	},
	Settings = {},
	Connection = {},
	Instances = {},
	Elements = {},
	Options = {},
	Flags = {},
	Tabs = {},
	Icons = (function()
		return {
			["accessibility"] = "rbxassetid://10709751939",
			["activity"] = "rbxassetid://10709752035",
			["airvent"] = "rbxassetid://10709752131",
			["airplay"] = "rbxassetid://10709752254",
			["alarmcheck"] = "rbxassetid://10709752405",
			["alarmclock"] = "rbxassetid://10709752630",
			["alarmclockoff"] = "rbxassetid://10709752508",
			["alarmminus"] = "rbxassetid://10709752732",
			["alarmplus"] = "rbxassetid://10709752825",
			["album"] = "rbxassetid://10709752906",
			["alertcircle"] = "rbxassetid://10709752996",
			["alertoctagon"] = "rbxassetid://10709753064",
			["alerttriangle"] = "rbxassetid://10709753149",
			["aligncenter"] = "rbxassetid://10709753570",
			["aligncenterhorizontal"] = "rbxassetid://10709753272",
			["aligncentervertical"] = "rbxassetid://10709753421",
			["alignendhorizontal"] = "rbxassetid://10709753692",
			["alignendvertical"] = "rbxassetid://10709753808",
			["alignhorizontaldistributecenter"] = "rbxassetid://10747779791",
			["alignhorizontaldistributeend"] = "rbxassetid://10747784534",
			["alignhorizontaldistributestart"] = "rbxassetid://10709754118",
			["alignhorizontaljustifycenter"] = "rbxassetid://10709754204",
			["alignhorizontaljustifyend"] = "rbxassetid://10709754317",
			["alignhorizontaljustifystart"] = "rbxassetid://10709754436",
			["alignhorizontalspacearound"] = "rbxassetid://10709754590",
			["alignhorizontalspacebetween"] = "rbxassetid://10709754749",
			["alignjustify"] = "rbxassetid://10709759610",
			["alignleft"] = "rbxassetid://10709759764",
			["alignright"] = "rbxassetid://10709759895",
			["alignstarthorizontal"] = "rbxassetid://10709760051",
			["alignstartvertical"] = "rbxassetid://10709760244",
			["alignverticaldistributecenter"] = "rbxassetid://10709760351",
			["alignverticaldistributeend"] = "rbxassetid://10709760434",
			["alignverticaldistributestart"] = "rbxassetid://10709760612",
			["alignverticaljustifycenter"] = "rbxassetid://10709760814",
			["alignverticaljustifyend"] = "rbxassetid://10709761003",
			["alignverticaljustifystart"] = "rbxassetid://10709761176",
			["alignverticalspacearound"] = "rbxassetid://10709761324",
			["alignverticalspacebetween"] = "rbxassetid://10709761434",
			["anchor"] = "rbxassetid://10709761530",
			["angry"] = "rbxassetid://10709761629",
			["annoyed"] = "rbxassetid://10709761722",
			["aperture"] = "rbxassetid://10709761813",
			["apple"] = "rbxassetid://10709761889",
			["archive"] = "rbxassetid://10709762233",
			["archiverestore"] = "rbxassetid://10709762058",
			["armchair"] = "rbxassetid://10709762327",
			["arrowbigdown"] = "rbxassetid://10747796644",
			["arrowbigleft"] = "rbxassetid://10709762574",
			["arrowbigright"] = "rbxassetid://10709762727",
			["arrowbigup"] = "rbxassetid://10709762879",
			["arrowdown"] = "rbxassetid://10709767827",
			["arrowdowncircle"] = "rbxassetid://10709763034",
			["arrowdownleft"] = "rbxassetid://10709767656",
			["arrowdownright"] = "rbxassetid://10709767750",
			["arrowleft"] = "rbxassetid://10709768114",
			["arrowleftcircle"] = "rbxassetid://10709767936",
			["arrowleftright"] = "rbxassetid://10709768019",
			["arrowright"] = "rbxassetid://10709768347",
			["arrowrightcircle"] = "rbxassetid://10709768226",
			["arrowup"] = "rbxassetid://10709768939",
			["arrowupcircle"] = "rbxassetid://10709768432",
			["arrowupdown"] = "rbxassetid://10709768538",
			["arrowupleft"] = "rbxassetid://10709768661",
			["arrowupright"] = "rbxassetid://10709768787",
			["asterisk"] = "rbxassetid://10709769095",
			["atsign"] = "rbxassetid://10709769286",
			["award"] = "rbxassetid://10709769406",
			["axe"] = "rbxassetid://10709769508",
			["axis3d"] = "rbxassetid://10709769598",
			["baby"] = "rbxassetid://10709769732",
			["backpack"] = "rbxassetid://10709769841",
			["baggageclaim"] = "rbxassetid://10709769935",
			["banana"] = "rbxassetid://10709770005",
			["banknote"] = "rbxassetid://10709770178",
			["barchart"] = "rbxassetid://10709773755",
			["barchart2"] = "rbxassetid://10709770317",
			["barchart3"] = "rbxassetid://10709770431",
			["barchart4"] = "rbxassetid://10709770560",
			["barcharthorizontal"] = "rbxassetid://10709773669",
			["barcode"] = "rbxassetid://10747360675",
			["baseline"] = "rbxassetid://10709773863",
			["bath"] = "rbxassetid://10709773963",
			["battery"] = "rbxassetid://10709774640",
			["batterycharging"] = "rbxassetid://10709774068",
			["batteryfull"] = "rbxassetid://10709774206",
			["batterylow"] = "rbxassetid://10709774370",
			["batterymedium"] = "rbxassetid://10709774513",
			["beaker"] = "rbxassetid://10709774756",
			["bed"] = "rbxassetid://10709775036",
			["beddouble"] = "rbxassetid://10709774864",
			["bedsingle"] = "rbxassetid://10709774968",
			["beer"] = "rbxassetid://10709775167",
			["bell"] = "rbxassetid://10709775704",
			["bellminus"] = "rbxassetid://10709775241",
			["belloff"] = "rbxassetid://10709775320",
			["bellplus"] = "rbxassetid://10709775448",
			["bellring"] = "rbxassetid://10709775560",
			["bike"] = "rbxassetid://10709775894",
			["binary"] = "rbxassetid://10709776050",
			["bitcoin"] = "rbxassetid://10709776126",
			["bluetooth"] = "rbxassetid://10709776655",
			["bluetoothconnected"] = "rbxassetid://10709776240",
			["bluetoothoff"] = "rbxassetid://10709776344",
			["bluetoothsearching"] = "rbxassetid://10709776501",
			["bold"] = "rbxassetid://10747813908",
			["bomb"] = "rbxassetid://10709781460",
			["bone"] = "rbxassetid://10709781605",
			["book"] = "rbxassetid://10709781824",
			["bookopen"] = "rbxassetid://10709781717",
			["bookmark"] = "rbxassetid://10709782154",
			["bookmarkminus"] = "rbxassetid://10709781919",
			["bookmarkplus"] = "rbxassetid://10709782044",
			["bot"] = "rbxassetid://10709782230",
			["box"] = "rbxassetid://10709782497",
			["boxselect"] = "rbxassetid://10709782342",
			["boxes"] = "rbxassetid://10709782582",
			["briefcase"] = "rbxassetid://10709782662",
			["brush"] = "rbxassetid://10709782758",
			["bug"] = "rbxassetid://10709782845",
			["building"] = "rbxassetid://10709783051",
			["building2"] = "rbxassetid://10709782939",
			["bus"] = "rbxassetid://10709783137",
			["cake"] = "rbxassetid://10709783217",
			["calculator"] = "rbxassetid://10709783311",
			["calendar"] = "rbxassetid://10709789505",
			["calendarcheck"] = "rbxassetid://10709783474",
			["calendarcheck2"] = "rbxassetid://10709783392",
			["calendarclock"] = "rbxassetid://10709783577",
			["calendardays"] = "rbxassetid://10709783673",
			["calendarheart"] = "rbxassetid://10709783835",
			["calendarminus"] = "rbxassetid://10709783959",
			["calendaroff"] = "rbxassetid://10709788784",
			["calendarplus"] = "rbxassetid://10709788937",
			["calendarrange"] = "rbxassetid://10709789053",
			["calendarsearch"] = "rbxassetid://10709789200",
			["calendarx"] = "rbxassetid://10709789407",
			["calendarx2"] = "rbxassetid://10709789329",
			["camera"] = "rbxassetid://10709789686",
			["cameraoff"] = "rbxassetid://10747822677",
			["car"] = "rbxassetid://10709789810",
			["carrot"] = "rbxassetid://10709789960",
			["cast"] = "rbxassetid://10709790097",
			["charge"] = "rbxassetid://10709790202",
			["check"] = "rbxassetid://10709790644",
			["checkcircle"] = "rbxassetid://10709790387",
			["checkcircle2"] = "rbxassetid://10709790298",
			["checksquare"] = "rbxassetid://10709790537",
			["chefhat"] = "rbxassetid://10709790757",
			["cherry"] = "rbxassetid://10709790875",
			["chevrondown"] = "rbxassetid://10709790948",
			["chevronfirst"] = "rbxassetid://10709791015",
			["chevronlast"] = "rbxassetid://10709791130",
			["chevronleft"] = "rbxassetid://10709791281",
			["chevronright"] = "rbxassetid://10709791437",
			["chevronup"] = "rbxassetid://10709791523",
			["chevronsdown"] = "rbxassetid://10709796864",
			["chevronsdownup"] = "rbxassetid://10709791632",
			["chevronsleft"] = "rbxassetid://10709797151",
			["chevronsleftright"] = "rbxassetid://10709797006",
			["chevronsright"] = "rbxassetid://10709797382",
			["chevronsrightleft"] = "rbxassetid://10709797274",
			["chevronsup"] = "rbxassetid://10709797622",
			["chevronsupdown"] = "rbxassetid://10709797508",
			["chrome"] = "rbxassetid://10709797725",
			["circle"] = "rbxassetid://10709798174",
			["circledot"] = "rbxassetid://10709797837",
			["circleellipsis"] = "rbxassetid://10709797985",
			["circleslashed"] = "rbxassetid://10709798100",
			["citrus"] = "rbxassetid://10709798276",
			["clapperboard"] = "rbxassetid://10709798350",
			["clipboard"] = "rbxassetid://10709799288",
			["clipboardcheck"] = "rbxassetid://10709798443",
			["clipboardcopy"] = "rbxassetid://10709798574",
			["clipboardedit"] = "rbxassetid://10709798682",
			["clipboardlist"] = "rbxassetid://10709798792",
			["clipboardsignature"] = "rbxassetid://10709798890",
			["clipboardtype"] = "rbxassetid://10709798999",
			["clipboardx"] = "rbxassetid://10709799124",
			["clock"] = "rbxassetid://10709805144",
			["clock1"] = "rbxassetid://10709799535",
			["clock10"] = "rbxassetid://10709799718",
			["clock11"] = "rbxassetid://10709799818",
			["clock12"] = "rbxassetid://10709799962",
			["clock2"] = "rbxassetid://10709803876",
			["clock3"] = "rbxassetid://10709803989",
			["clock4"] = "rbxassetid://10709804164",
			["clock5"] = "rbxassetid://10709804291",
			["clock6"] = "rbxassetid://10709804435",
			["clock7"] = "rbxassetid://10709804599",
			["clock8"] = "rbxassetid://10709804784",
			["clock9"] = "rbxassetid://10709804996",
			["cloud"] = "rbxassetid://10709806740",
			["cloudcog"] = "rbxassetid://10709805262",
			["clouddrizzle"] = "rbxassetid://10709805371",
			["cloudfog"] = "rbxassetid://10709805477",
			["cloudhail"] = "rbxassetid://10709805596",
			["cloudlightning"] = "rbxassetid://10709805727",
			["cloudmoon"] = "rbxassetid://10709805942",
			["cloudmoonrain"] = "rbxassetid://10709805838",
			["cloudoff"] = "rbxassetid://10709806060",
			["cloudrain"] = "rbxassetid://10709806277",
			["cloudrainwind"] = "rbxassetid://10709806166",
			["cloudsnow"] = "rbxassetid://10709806374",
			["cloudsun"] = "rbxassetid://10709806631",
			["cloudsunrain"] = "rbxassetid://10709806475",
			["cloudy"] = "rbxassetid://10709806859",
			["clover"] = "rbxassetid://10709806995",
			["code"] = "rbxassetid://10709810463",
			["code2"] = "rbxassetid://10709807111",
			["codepen"] = "rbxassetid://10709810534",
			["codesandbox"] = "rbxassetid://10709810676",
			["coffee"] = "rbxassetid://10709810814",
			["cog"] = "rbxassetid://10709810948",
			["coins"] = "rbxassetid://10709811110",
			["columns"] = "rbxassetid://10709811261",
			["command"] = "rbxassetid://10709811365",
			["compass"] = "rbxassetid://10709811445",
			["component"] = "rbxassetid://10709811595",
			["conciergebell"] = "rbxassetid://10709811706",
			["connection"] = "rbxassetid://10747361219",
			["contact"] = "rbxassetid://10709811834",
			["contrast"] = "rbxassetid://10709811939",
			["cookie"] = "rbxassetid://10709812067",
			["copy"] = "rbxassetid://10709812159",
			["copyleft"] = "rbxassetid://10709812251",
			["copyright"] = "rbxassetid://10709812311",
			["cornerdownleft"] = "rbxassetid://10709812396",
			["cornerdownright"] = "rbxassetid://10709812485",
			["cornerleftdown"] = "rbxassetid://10709812632",
			["cornerleftup"] = "rbxassetid://10709812784",
			["cornerrightdown"] = "rbxassetid://10709812939",
			["cornerrightup"] = "rbxassetid://10709813094",
			["cornerupleft"] = "rbxassetid://10709813185",
			["cornerupright"] = "rbxassetid://10709813281",
			["cpu"] = "rbxassetid://10709813383",
			["croissant"] = "rbxassetid://10709818125",
			["crop"] = "rbxassetid://10709818245",
			["cross"] = "rbxassetid://10709818399",
			["crosshair"] = "rbxassetid://10709818534",
			["crown"] = "rbxassetid://10709818626",
			["cupsoda"] = "rbxassetid://10709818763",
			["curlybraces"] = "rbxassetid://10709818847",
			["currency"] = "rbxassetid://10709818931",
			["database"] = "rbxassetid://10709818996",
			["delete"] = "rbxassetid://10709819059",
			["diamond"] = "rbxassetid://10709819149",
			["dice1"] = "rbxassetid://10709819266",
			["dice2"] = "rbxassetid://10709819361",
			["dice3"] = "rbxassetid://10709819508",
			["dice4"] = "rbxassetid://10709819670",
			["dice5"] = "rbxassetid://10709819801",
			["dice6"] = "rbxassetid://10709819896",
			["dices"] = "rbxassetid://10723343321",
			["diff"] = "rbxassetid://10723343416",
			["disc"] = "rbxassetid://10723343537",
			["divide"] = "rbxassetid://10723343805",
			["dividecircle"] = "rbxassetid://10723343636",
			["dividesquare"] = "rbxassetid://10723343737",
			["dollarsign"] = "rbxassetid://10723343958",
			["download"] = "rbxassetid://10723344270",
			["downloadcloud"] = "rbxassetid://10723344088",
			["droplet"] = "rbxassetid://10723344432",
			["droplets"] = "rbxassetid://10734883356",
			["drumstick"] = "rbxassetid://10723344737",
			["edit"] = "rbxassetid://10734883598",
			["edit2"] = "rbxassetid://10723344885",
			["edit3"] = "rbxassetid://10723345088",
			["egg"] = "rbxassetid://10723345518",
			["eggfried"] = "rbxassetid://10723345347",
			["electricity"] = "rbxassetid://10723345749",
			["electricityoff"] = "rbxassetid://10723345643",
			["equal"] = "rbxassetid://10723345990",
			["equalnot"] = "rbxassetid://10723345866",
			["eraser"] = "rbxassetid://10723346158",
			["euro"] = "rbxassetid://10723346372",
			["expand"] = "rbxassetid://10723346553",
			["externallink"] = "rbxassetid://10723346684",
			["eye"] = "rbxassetid://10723346959",
			["eyeoff"] = "rbxassetid://10723346871",
			["factory"] = "rbxassetid://10723347051",
			["fan"] = "rbxassetid://10723354359",
			["fastforward"] = "rbxassetid://10723354521",
			["feather"] = "rbxassetid://10723354671",
			["figma"] = "rbxassetid://10723354801",
			["file"] = "rbxassetid://10723374641",
			["filearchive"] = "rbxassetid://10723354921",
			["fileaudio"] = "rbxassetid://10723355148",
			["fileaudio2"] = "rbxassetid://10723355026",
			["fileaxis3d"] = "rbxassetid://10723355272",
			["filebadge"] = "rbxassetid://10723355622",
			["filebadge2"] = "rbxassetid://10723355451",
			["filebarchart"] = "rbxassetid://10723355887",
			["filebarchart2"] = "rbxassetid://10723355746",
			["filebox"] = "rbxassetid://10723355989",
			["filecheck"] = "rbxassetid://10723356210",
			["filecheck2"] = "rbxassetid://10723356100",
			["fileclock"] = "rbxassetid://10723356329",
			["filecode"] = "rbxassetid://10723356507",
			["filecog"] = "rbxassetid://10723356830",
			["filecog2"] = "rbxassetid://10723356676",
			["filediff"] = "rbxassetid://10723357039",
			["filedigit"] = "rbxassetid://10723357151",
			["filedown"] = "rbxassetid://10723357322",
			["fileedit"] = "rbxassetid://10723357495",
			["fileheart"] = "rbxassetid://10723357637",
			["fileimage"] = "rbxassetid://10723357790",
			["fileinput"] = "rbxassetid://10723357933",
			["filejson"] = "rbxassetid://10723364435",
			["filejson2"] = "rbxassetid://10723364361",
			["filekey"] = "rbxassetid://10723364605",
			["filekey2"] = "rbxassetid://10723364515",
			["filelinechart"] = "rbxassetid://10723364725",
			["filelock"] = "rbxassetid://10723364957",
			["filelock2"] = "rbxassetid://10723364861",
			["fileminus"] = "rbxassetid://10723365254",
			["fileminus2"] = "rbxassetid://10723365086",
			["fileoutput"] = "rbxassetid://10723365457",
			["filepiechart"] = "rbxassetid://10723365598",
			["fileplus"] = "rbxassetid://10723365877",
			["fileplus2"] = "rbxassetid://10723365766",
			["filequestion"] = "rbxassetid://10723365987",
			["filescan"] = "rbxassetid://10723366167",
			["filesearch"] = "rbxassetid://10723366550",
			["filesearch2"] = "rbxassetid://10723366340",
			["filesignature"] = "rbxassetid://10723366741",
			["filespreadsheet"] = "rbxassetid://10723366962",
			["filesymlink"] = "rbxassetid://10723367098",
			["fileterminal"] = "rbxassetid://10723367244",
			["filetext"] = "rbxassetid://10723367380",
			["filetype"] = "rbxassetid://10723367606",
			["filetype2"] = "rbxassetid://10723367509",
			["fileup"] = "rbxassetid://10723367734",
			["filevideo"] = "rbxassetid://10723373884",
			["filevideo2"] = "rbxassetid://10723367834",
			["filevolume"] = "rbxassetid://10723374172",
			["filevolume2"] = "rbxassetid://10723374030",
			["filewarning"] = "rbxassetid://10723374276",
			["filex"] = "rbxassetid://10723374544",
			["filex2"] = "rbxassetid://10723374378",
			["files"] = "rbxassetid://10723374759",
			["film"] = "rbxassetid://10723374981",
			["filter"] = "rbxassetid://10723375128",
			["fingerprint"] = "rbxassetid://10723375250",
			["flag"] = "rbxassetid://10723375890",
			["flagoff"] = "rbxassetid://10723375443",
			["flagtriangleleft"] = "rbxassetid://10723375608",
			["flagtriangleright"] = "rbxassetid://10723375727",
			["flame"] = "rbxassetid://10723376114",
			["flashlight"] = "rbxassetid://10723376471",
			["flashlightoff"] = "rbxassetid://10723376365",
			["flaskconical"] = "rbxassetid://10734883986",
			["flaskround"] = "rbxassetid://10723376614",
			["fliphorizontal"] = "rbxassetid://10723376884",
			["fliphorizontal2"] = "rbxassetid://10723376745",
			["flipvertical"] = "rbxassetid://10723377138",
			["flipvertical2"] = "rbxassetid://10723377026",
			["flower"] = "rbxassetid://10747830374",
			["flower2"] = "rbxassetid://10723377305",
			["focus"] = "rbxassetid://10723377537",
			["folder"] = "rbxassetid://10723387563",
			["folderarchive"] = "rbxassetid://10723384478",
			["foldercheck"] = "rbxassetid://10723384605",
			["folderclock"] = "rbxassetid://10723384731",
			["folderclosed"] = "rbxassetid://10723384893",
			["foldercog"] = "rbxassetid://10723385213",
			["foldercog2"] = "rbxassetid://10723385036",
			["folderdown"] = "rbxassetid://10723385338",
			["folderedit"] = "rbxassetid://10723385445",
			["folderheart"] = "rbxassetid://10723385545",
			["folderinput"] = "rbxassetid://10723385721",
			["folderkey"] = "rbxassetid://10723385848",
			["folderlock"] = "rbxassetid://10723386005",
			["folderminus"] = "rbxassetid://10723386127",
			["folderopen"] = "rbxassetid://10723386277",
			["folderoutput"] = "rbxassetid://10723386386",
			["folderplus"] = "rbxassetid://10723386531",
			["foldersearch"] = "rbxassetid://10723386787",
			["foldersearch2"] = "rbxassetid://10723386674",
			["foldersymlink"] = "rbxassetid://10723386930",
			["foldertree"] = "rbxassetid://10723387085",
			["folderup"] = "rbxassetid://10723387265",
			["folderx"] = "rbxassetid://10723387448",
			["folders"] = "rbxassetid://10723387721",
			["forminput"] = "rbxassetid://10723387841",
			["forward"] = "rbxassetid://10723388016",
			["frame"] = "rbxassetid://10723394389",
			["framer"] = "rbxassetid://10723394565",
			["frown"] = "rbxassetid://10723394681",
			["fuel"] = "rbxassetid://10723394846",
			["functionsquare"] = "rbxassetid://10723395041",
			["gamepad"] = "rbxassetid://10723395457",
			["gamepad2"] = "rbxassetid://10723395215",
			["gauge"] = "rbxassetid://10723395708",
			["gavel"] = "rbxassetid://10723395896",
			["gem"] = "rbxassetid://10723396000",
			["ghost"] = "rbxassetid://10723396107",
			["gift"] = "rbxassetid://10723396402",
			["giftcard"] = "rbxassetid://10723396225",
			["gitbranch"] = "rbxassetid://10723396676",
			["gitbranchplus"] = "rbxassetid://10723396542",
			["gitcommit"] = "rbxassetid://10723396812",
			["gitcompare"] = "rbxassetid://10723396954",
			["gitfork"] = "rbxassetid://10723397049",
			["gitmerge"] = "rbxassetid://10723397165",
			["gitpullrequest"] = "rbxassetid://10723397431",
			["gitpullrequestclosed"] = "rbxassetid://10723397268",
			["gitpullrequestdraft"] = "rbxassetid://10734884302",
			["glass"] = "rbxassetid://10723397788",
			["glass2"] = "rbxassetid://10723397529",
			["glasswater"] = "rbxassetid://10723397678",
			["glasses"] = "rbxassetid://10723397895",
			["globe"] = "rbxassetid://10723404337",
			["globe2"] = "rbxassetid://10723398002",
			["grab"] = "rbxassetid://10723404472",
			["graduationcap"] = "rbxassetid://10723404691",
			["grape"] = "rbxassetid://10723404822",
			["grid"] = "rbxassetid://10723404936",
			["griphorizontal"] = "rbxassetid://10723405089",
			["gripvertical"] = "rbxassetid://10723405236",
			["hammer"] = "rbxassetid://10723405360",
			["hand"] = "rbxassetid://10723405649",
			["handmetal"] = "rbxassetid://10723405508",
			["harddrive"] = "rbxassetid://10723405749",
			["hardhat"] = "rbxassetid://10723405859",
			["hash"] = "rbxassetid://10723405975",
			["haze"] = "rbxassetid://10723406078",
			["headphones"] = "rbxassetid://10723406165",
			["heart"] = "rbxassetid://10723406885",
			["heartcrack"] = "rbxassetid://10723406299",
			["hearthandshake"] = "rbxassetid://10723406480",
			["heartoff"] = "rbxassetid://10723406662",
			["heartpulse"] = "rbxassetid://10723406795",
			["helpcircle"] = "rbxassetid://10723406988",
			["hexagon"] = "rbxassetid://10723407092",
			["highlighter"] = "rbxassetid://10723407192",
			["history"] = "rbxassetid://10723407335",
			["home"] = "rbxassetid://10723407389",
			["hourglass"] = "rbxassetid://10723407498",
			["icecream"] = "rbxassetid://10723414308",
			["image"] = "rbxassetid://10723415040",
			["imageminus"] = "rbxassetid://10723414487",
			["imageoff"] = "rbxassetid://10723414677",
			["imageplus"] = "rbxassetid://10723414827",
			["import"] = "rbxassetid://10723415205",
			["inbox"] = "rbxassetid://10723415335",
			["indent"] = "rbxassetid://10723415494",
			["indianrupee"] = "rbxassetid://10723415642",
			["infinity"] = "rbxassetid://10723415766",
			["info"] = "rbxassetid://10723415903",
			["inspect"] = "rbxassetid://10723416057",
			["italic"] = "rbxassetid://10723416195",
			["japaneseyen"] = "rbxassetid://10723416363",
			["joystick"] = "rbxassetid://10723416527",
			["key"] = "rbxassetid://10723416652",
			["keyboard"] = "rbxassetid://10723416765",
			["lamp"] = "rbxassetid://10723417513",
			["lampceiling"] = "rbxassetid://10723416922",
			["lampdesk"] = "rbxassetid://10723417016",
			["lampfloor"] = "rbxassetid://10723417131",
			["lampwalldown"] = "rbxassetid://10723417240",
			["lampwallup"] = "rbxassetid://10723417356",
			["landmark"] = "rbxassetid://10723417608",
			["languages"] = "rbxassetid://10723417703",
			["laptop"] = "rbxassetid://10723423881",
			["laptop2"] = "rbxassetid://10723417797",
			["lasso"] = "rbxassetid://10723424235",
			["lassoselect"] = "rbxassetid://10723424058",
			["laugh"] = "rbxassetid://10723424372",
			["layers"] = "rbxassetid://10723424505",
			["layout"] = "rbxassetid://10723425376",
			["layoutdashboard"] = "rbxassetid://10723424646",
			["layoutgrid"] = "rbxassetid://10723424838",
			["layoutlist"] = "rbxassetid://10723424963",
			["layouttemplate"] = "rbxassetid://10723425187",
			["leaf"] = "rbxassetid://10723425539",
			["library"] = "rbxassetid://10723425615",
			["lifebuoy"] = "rbxassetid://10723425685",
			["lightbulb"] = "rbxassetid://10723425852",
			["lightbulboff"] = "rbxassetid://10723425762",
			["linechart"] = "rbxassetid://10723426393",
			["link"] = "rbxassetid://10723426722",
			["link2"] = "rbxassetid://10723426595",
			["link2off"] = "rbxassetid://10723426513",
			["list"] = "rbxassetid://10723433811",
			["listchecks"] = "rbxassetid://10734884548",
			["listend"] = "rbxassetid://10723426886",
			["listminus"] = "rbxassetid://10723426986",
			["listmusic"] = "rbxassetid://10723427081",
			["listordered"] = "rbxassetid://10723427199",
			["listplus"] = "rbxassetid://10723427334",
			["liststart"] = "rbxassetid://10723427494",
			["listvideo"] = "rbxassetid://10723427619",
			["listx"] = "rbxassetid://10723433655",
			["loader"] = "rbxassetid://10723434070",
			["loader2"] = "rbxassetid://10723433935",
			["locate"] = "rbxassetid://10723434557",
			["locatefixed"] = "rbxassetid://10723434236",
			["locateoff"] = "rbxassetid://10723434379",
			["lock"] = "rbxassetid://10723434711",
			["login"] = "rbxassetid://10723434830",
			["logout"] = "rbxassetid://10723434906",
			["luggage"] = "rbxassetid://10723434993",
			["magnet"] = "rbxassetid://10723435069",
			["mail"] = "rbxassetid://10734885430",
			["mailcheck"] = "rbxassetid://10723435182",
			["mailminus"] = "rbxassetid://10723435261",
			["mailopen"] = "rbxassetid://10723435342",
			["mailplus"] = "rbxassetid://10723435443",
			["mailquestion"] = "rbxassetid://10723435515",
			["mailsearch"] = "rbxassetid://10734884739",
			["mailwarning"] = "rbxassetid://10734885015",
			["mailx"] = "rbxassetid://10734885247",
			["mails"] = "rbxassetid://10734885614",
			["map"] = "rbxassetid://10734886202",
			["mappin"] = "rbxassetid://10734886004",
			["mappinoff"] = "rbxassetid://10734885803",
			["maximize"] = "rbxassetid://10734886735",
			["maximize2"] = "rbxassetid://10734886496",
			["medal"] = "rbxassetid://10734887072",
			["megaphone"] = "rbxassetid://10734887454",
			["megaphoneoff"] = "rbxassetid://10734887311",
			["meh"] = "rbxassetid://10734887603",
			["menu"] = "rbxassetid://10734887784",
			["messagecircle"] = "rbxassetid://10734888000",
			["messagesquare"] = "rbxassetid://10734888228",
			["mic"] = "rbxassetid://10734888864",
			["mic2"] = "rbxassetid://10734888430",
			["micoff"] = "rbxassetid://10734888646",
			["microscope"] = "rbxassetid://10734889106",
			["microwave"] = "rbxassetid://10734895076",
			["milestone"] = "rbxassetid://10734895310",
			["minimize"] = "rbxassetid://10734895698",
			["minimize2"] = "rbxassetid://10734895530",
			["minus"] = "rbxassetid://10734896206",
			["minuscircle"] = "rbxassetid://10734895856",
			["minussquare"] = "rbxassetid://10734896029",
			["monitor"] = "rbxassetid://10734896881",
			["monitoroff"] = "rbxassetid://10734896360",
			["monitorspeaker"] = "rbxassetid://10734896512",
			["moon"] = "rbxassetid://10734897102",
			["morehorizontal"] = "rbxassetid://10734897250",
			["morevertical"] = "rbxassetid://10734897387",
			["mountain"] = "rbxassetid://10734897956",
			["mountainsnow"] = "rbxassetid://10734897665",
			["mouse"] = "rbxassetid://10734898592",
			["mousepointer"] = "rbxassetid://10734898476",
			["mousepointer2"] = "rbxassetid://10734898194",
			["mousepointerclick"] = "rbxassetid://10734898355",
			["move"] = "rbxassetid://10734900011",
			["move3d"] = "rbxassetid://10734898756",
			["movediagonal"] = "rbxassetid://10734899164",
			["movediagonal2"] = "rbxassetid://10734898934",
			["movehorizontal"] = "rbxassetid://10734899414",
			["movevertical"] = "rbxassetid://10734899821",
			["music"] = "rbxassetid://10734905958",
			["music2"] = "rbxassetid://10734900215",
			["music3"] = "rbxassetid://10734905665",
			["music4"] = "rbxassetid://10734905823",
			["navigation"] = "rbxassetid://10734906744",
			["navigation2"] = "rbxassetid://10734906332",
			["navigation2off"] = "rbxassetid://10734906144",
			["navigationoff"] = "rbxassetid://10734906580",
			["network"] = "rbxassetid://10734906975",
			["newspaper"] = "rbxassetid://10734907168",
			["octagon"] = "rbxassetid://10734907361",
			["option"] = "rbxassetid://10734907649",
			["outdent"] = "rbxassetid://10734907933",
			["package"] = "rbxassetid://10734909540",
			["package2"] = "rbxassetid://10734908151",
			["packagecheck"] = "rbxassetid://10734908384",
			["packageminus"] = "rbxassetid://10734908626",
			["packageopen"] = "rbxassetid://10734908793",
			["packageplus"] = "rbxassetid://10734909016",
			["packagesearch"] = "rbxassetid://10734909196",
			["packagex"] = "rbxassetid://10734909375",
			["paintbucket"] = "rbxassetid://10734909847",
			["paintbrush"] = "rbxassetid://10734910187",
			["paintbrush2"] = "rbxassetid://10734910030",
			["palette"] = "rbxassetid://10734910430",
			["palmtree"] = "rbxassetid://10734910680",
			["paperclip"] = "rbxassetid://10734910927",
			["partypopper"] = "rbxassetid://10734918735",
			["pause"] = "rbxassetid://10734919336",
			["pausecircle"] = "rbxassetid://10735024209",
			["pauseoctagon"] = "rbxassetid://10734919143",
			["pentool"] = "rbxassetid://10734919503",
			["pencil"] = "rbxassetid://10734919691",
			["percent"] = "rbxassetid://10734919919",
			["personstanding"] = "rbxassetid://10734920149",
			["phone"] = "rbxassetid://10734921524",
			["phonecall"] = "rbxassetid://10734920305",
			["phoneforwarded"] = "rbxassetid://10734920508",
			["phoneincoming"] = "rbxassetid://10734920694",
			["phonemissed"] = "rbxassetid://10734920845",
			["phoneoff"] = "rbxassetid://10734921077",
			["phoneoutgoing"] = "rbxassetid://10734921288",
			["piechart"] = "rbxassetid://10734921727",
			["piggybank"] = "rbxassetid://10734921935",
			["pin"] = "rbxassetid://10734922324",
			["pinoff"] = "rbxassetid://10734922180",
			["pipette"] = "rbxassetid://10734922497",
			["pizza"] = "rbxassetid://10734922774",
			["plane"] = "rbxassetid://10734922971",
			["play"] = "rbxassetid://10734923549",
			["playcircle"] = "rbxassetid://10734923214",
			["plus"] = "rbxassetid://10734924532",
			["pluscircle"] = "rbxassetid://10734923868",
			["plussquare"] = "rbxassetid://10734924219",
			["podcast"] = "rbxassetid://10734929553",
			["pointer"] = "rbxassetid://10734929723",
			["poundsterling"] = "rbxassetid://10734929981",
			["power"] = "rbxassetid://10734930466",
			["poweroff"] = "rbxassetid://10734930257",
			["printer"] = "rbxassetid://10734930632",
			["puzzle"] = "rbxassetid://10734930886",
			["quote"] = "rbxassetid://10734931234",
			["radio"] = "rbxassetid://10734931596",
			["radioreceiver"] = "rbxassetid://10734931402",
			["rectanglehorizontal"] = "rbxassetid://10734931777",
			["rectanglevertical"] = "rbxassetid://10734932081",
			["recycle"] = "rbxassetid://10734932295",
			["redo"] = "rbxassetid://10734932822",
			["redo2"] = "rbxassetid://10734932586",
			["refreshccw"] = "rbxassetid://10734933056",
			["refreshcw"] = "rbxassetid://10734933222",
			["refrigerator"] = "rbxassetid://10734933465",
			["regex"] = "rbxassetid://10734933655",
			["repeat"] = "rbxassetid://10734933966",
			["repeat1"] = "rbxassetid://10734933826",
			["reply"] = "rbxassetid://10734934252",
			["replyall"] = "rbxassetid://10734934132",
			["rewind"] = "rbxassetid://10734934347",
			["rocket"] = "rbxassetid://10734934585",
			["rockingchair"] = "rbxassetid://10734939942",
			["rotate3d"] = "rbxassetid://10734940107",
			["rotateccw"] = "rbxassetid://10734940376",
			["rotatecw"] = "rbxassetid://10734940654",
			["rss"] = "rbxassetid://10734940825",
			["ruler"] = "rbxassetid://10734941018",
			["russianruble"] = "rbxassetid://10734941199",
			["sailboat"] = "rbxassetid://10734941354",
			["save"] = "rbxassetid://10734941499",
			["scale"] = "rbxassetid://10734941912",
			["scale3d"] = "rbxassetid://10734941739",
			["scaling"] = "rbxassetid://10734942072",
			["scan"] = "rbxassetid://10734942565",
			["scanface"] = "rbxassetid://10734942198",
			["scanline"] = "rbxassetid://10734942351",
			["scissors"] = "rbxassetid://10734942778",
			["screenshare"] = "rbxassetid://10734943193",
			["screenshareoff"] = "rbxassetid://10734942967",
			["scroll"] = "rbxassetid://10734943448",
			["search"] = "rbxassetid://10734943674",
			["send"] = "rbxassetid://10734943902",
			["separatorhorizontal"] = "rbxassetid://10734944115",
			["separatorvertical"] = "rbxassetid://10734944326",
			["server"] = "rbxassetid://10734949856",
			["servercog"] = "rbxassetid://10734944444",
			["servercrash"] = "rbxassetid://10734944554",
			["serveroff"] = "rbxassetid://10734944668",
			["settings"] = "rbxassetid://10734950309",
			["settings2"] = "rbxassetid://10734950020",
			["share"] = "rbxassetid://10734950813",
			["share2"] = "rbxassetid://10734950553",
			["sheet"] = "rbxassetid://10734951038",
			["shield"] = "rbxassetid://10734951847",
			["shieldalert"] = "rbxassetid://10734951173",
			["shieldcheck"] = "rbxassetid://10734951367",
			["shieldclose"] = "rbxassetid://10734951535",
			["shieldoff"] = "rbxassetid://10734951684",
			["shirt"] = "rbxassetid://10734952036",
			["shoppingbag"] = "rbxassetid://10734952273",
			["shoppingcart"] = "rbxassetid://10734952479",
			["shovel"] = "rbxassetid://10734952773",
			["showerhead"] = "rbxassetid://10734952942",
			["shrink"] = "rbxassetid://10734953073",
			["shrub"] = "rbxassetid://10734953241",
			["shuffle"] = "rbxassetid://10734953451",
			["sidebar"] = "rbxassetid://10734954301",
			["sidebarclose"] = "rbxassetid://10734953715",
			["sidebaropen"] = "rbxassetid://10734954000",
			["sigma"] = "rbxassetid://10734954538",
			["signal"] = "rbxassetid://10734961133",
			["signalhigh"] = "rbxassetid://10734954807",
			["signallow"] = "rbxassetid://10734955080",
			["signalmedium"] = "rbxassetid://10734955336",
			["signalzero"] = "rbxassetid://10734960878",
			["siren"] = "rbxassetid://10734961284",
			["skipback"] = "rbxassetid://10734961526",
			["skipforward"] = "rbxassetid://10734961809",
			["skull"] = "rbxassetid://10734962068",
			["slack"] = "rbxassetid://10734962339",
			["slash"] = "rbxassetid://10734962600",
			["slice"] = "rbxassetid://10734963024",
			["sliders"] = "rbxassetid://10734963400",
			["slidershorizontal"] = "rbxassetid://10734963191",
			["smartphone"] = "rbxassetid://10734963940",
			["smartphonecharging"] = "rbxassetid://10734963671",
			["smile"] = "rbxassetid://10734964441",
			["smileplus"] = "rbxassetid://10734964188",
			["snowflake"] = "rbxassetid://10734964600",
			["sofa"] = "rbxassetid://10734964852",
			["sortasc"] = "rbxassetid://10734965115",
			["sortdesc"] = "rbxassetid://10734965287",
			["speaker"] = "rbxassetid://10734965419",
			["sprout"] = "rbxassetid://10734965572",
			["square"] = "rbxassetid://10734965702",
			["star"] = "rbxassetid://10734966248",
			["starhalf"] = "rbxassetid://10734965897",
			["staroff"] = "rbxassetid://10734966097",
			["stethoscope"] = "rbxassetid://10734966384",
			["sticker"] = "rbxassetid://10734972234",
			["stickynote"] = "rbxassetid://10734972463",
			["stopcircle"] = "rbxassetid://10734972621",
			["stretchhorizontal"] = "rbxassetid://10734972862",
			["stretchvertical"] = "rbxassetid://10734973130",
			["strikethrough"] = "rbxassetid://10734973290",
			["subscript"] = "rbxassetid://10734973457",
			["sun"] = "rbxassetid://10734974297",
			["sundim"] = "rbxassetid://10734973645",
			["sunmedium"] = "rbxassetid://10734973778",
			["sunmoon"] = "rbxassetid://10734973999",
			["sunsnow"] = "rbxassetid://10734974130",
			["sunrise"] = "rbxassetid://10734974522",
			["sunset"] = "rbxassetid://10734974689",
			["superscript"] = "rbxassetid://10734974850",
			["swissfranc"] = "rbxassetid://10734975024",
			["switchcamera"] = "rbxassetid://10734975214",
			["sword"] = "rbxassetid://10734975486",
			["swords"] = "rbxassetid://10734975692",
			["syringe"] = "rbxassetid://10734975932",
			["table"] = "rbxassetid://10734976230",
			["table2"] = "rbxassetid://10734976097",
			["tablet"] = "rbxassetid://10734976394",
			["tag"] = "rbxassetid://10734976528",
			["tags"] = "rbxassetid://10734976739",
			["target"] = "rbxassetid://10734977012",
			["tent"] = "rbxassetid://10734981750",
			["terminal"] = "rbxassetid://10734982144",
			["terminalsquare"] = "rbxassetid://10734981995",
			["textcursor"] = "rbxassetid://10734982395",
			["textcursorinput"] = "rbxassetid://10734982297",
			["thermometer"] = "rbxassetid://10734983134",
			["thermometersnowflake"] = "rbxassetid://10734982571",
			["thermometersun"] = "rbxassetid://10734982771",
			["thumbsdown"] = "rbxassetid://10734983359",
			["thumbsup"] = "rbxassetid://10734983629",
			["ticket"] = "rbxassetid://10734983868",
			["timer"] = "rbxassetid://10734984606",
			["timeroff"] = "rbxassetid://10734984138",
			["timerreset"] = "rbxassetid://10734984355",
			["toggleleft"] = "rbxassetid://10734984834",
			["toggleright"] = "rbxassetid://10734985040",
			["tornado"] = "rbxassetid://10734985247",
			["toybrick"] = "rbxassetid://10747361919",
			["train"] = "rbxassetid://10747362105",
			["trash"] = "rbxassetid://10747362393",
			["trash2"] = "rbxassetid://10747362241",
			["treedeciduous"] = "rbxassetid://10747362534",
			["treepine"] = "rbxassetid://10747362748",
			["trees"] = "rbxassetid://10747363016",
			["trendingdown"] = "rbxassetid://10747363205",
			["trendingup"] = "rbxassetid://10747363465",
			["triangle"] = "rbxassetid://10747363621",
			["trophy"] = "rbxassetid://10747363809",
			["truck"] = "rbxassetid://10747364031",
			["tv"] = "rbxassetid://10747364593",
			["tv2"] = "rbxassetid://10747364302",
			["type"] = "rbxassetid://10747364761",
			["umbrella"] = "rbxassetid://10747364971",
			["underline"] = "rbxassetid://10747365191",
			["undo"] = "rbxassetid://10747365484",
			["undo2"] = "rbxassetid://10747365359",
			["unlink"] = "rbxassetid://10747365771",
			["unlink2"] = "rbxassetid://10747397871",
			["unlock"] = "rbxassetid://10747366027",
			["upload"] = "rbxassetid://10747366434",
			["uploadcloud"] = "rbxassetid://10747366266",
			["usb"] = "rbxassetid://10747366606",
			["user"] = "rbxassetid://10747373176",
			["usercheck"] = "rbxassetid://10747371901",
			["usercog"] = "rbxassetid://10747372167",
			["userminus"] = "rbxassetid://10747372346",
			["userplus"] = "rbxassetid://10747372702",
			["userx"] = "rbxassetid://10747372992",
			["users"] = "rbxassetid://10747373426",
			["utensils"] = "rbxassetid://10747373821",
			["utensilscrossed"] = "rbxassetid://10747373629",
			["venetianmask"] = "rbxassetid://10747374003",
			["verified"] = "rbxassetid://10747374131",
			["vibrate"] = "rbxassetid://10747374489",
			["vibrateoff"] = "rbxassetid://10747374269",
			["video"] = "rbxassetid://10747374938",
			["videooff"] = "rbxassetid://10747374721",
			["view"] = "rbxassetid://10747375132",
			["voicemail"] = "rbxassetid://10747375281",
			["volume"] = "rbxassetid://10747376008",
			["volume1"] = "rbxassetid://10747375450",
			["volume2"] = "rbxassetid://10747375679",
			["volumex"] = "rbxassetid://10747375880",
			["wallet"] = "rbxassetid://10747376205",
			["wand"] = "rbxassetid://10747376565",
			["wand2"] = "rbxassetid://10747376349",
			["watch"] = "rbxassetid://10747376722",
			["waves"] = "rbxassetid://10747376931",
			["webcam"] = "rbxassetid://10747381992",
			["wifi"] = "rbxassetid://10747382504",
			["wifioff"] = "rbxassetid://10747382268",
			["wind"] = "rbxassetid://10747382750",
			["wraptext"] = "rbxassetid://10747383065",
			["wrench"] = "rbxassetid://10747383470",
			["x"] = "rbxassetid://10747384394",
			["xcircle"] = "rbxassetid://10747383819",
			["xoctagon"] = "rbxassetid://10747384037",
			["xsquare"] = "rbxassetid://10747384217",
			["zoomin"] = "rbxassetid://10747384552",
			["zoomout"] = "rbxassetid://10747384679"
		}
	end)()
}

-- ok this is redz lib v5 but now its for sp cuz its has edited in full! and  big improvent and added more functions by sp to contact the the dev discord @nadermohamed22

local isMobile = UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled
local isPC = not UserInputService.TouchEnabled and UserInputService.KeyboardEnabled

local ViewportSize = workspace.CurrentCamera.ViewportSize
local UIScale = isPC and ViewportSize.Y / 550 or ViewportSize.Y / 425

local Settings = splib.Settings
local Flags = splib.Flags
local Toggles = {}

local SettingsFile = "sp lib v2.json"
local LoadedToggles = {}
if isfile(SettingsFile) then
    local ok, data = pcall(HttpService.JSONDecode, HttpService, readfile(SettingsFile))
    if ok and type(data) == "table" then
        LoadedToggles = data
    end
end

local DropdownsFile = "dropdowns.json"
local LoadedDropdowns = {}
if isfile(DropdownsFile) then
    local ok, data = pcall(function()
        return HttpService:JSONDecode(readfile(DropdownsFile))
    end)

    if ok and type(data) == "table" then
        LoadedDropdowns = data
    end
end

local function SaveCfg(filename)
    local data = {}
    for flag, obj in pairs(splib.Flags) do
        if obj.Save then
            data[flag] = obj.Value
        end
    end
    writefile(filename .. ".json", HttpService:JSONEncode(data))
end

local function LoadCfg(filename)
    if isfile(filename .. ".json") then
        local ok, data = pcall(HttpService.JSONDecode, HttpService, readfile(filename .. ".json"))
        if ok and type(data) == "table" then
            for flag, value in pairs(data) do
                local obj = splib.Flags[flag]
                if obj and obj.Set then
                    obj:Set(value)
                    obj.Value = value
                end
            end
        end
    end
end

LoadCfg("sp library v2")

local SetProps, SetChildren, InsertTheme, Create do
	InsertTheme = function(Instance, Type)
		table.insert(splib.Instances, {
			Instance = Instance,
			Type = Type
		})
		return Instance
	end
	
	SetChildren = function(Instance, Children)
		if Children then
			table.foreach(Children, function(_,Child)
				Child.Parent = Instance
			end)
		end
		return Instance
	end
	
	SetProps = function(Instance, Props)
		if Props then
			table.foreach(Props, function(prop, value)
				Instance[prop] = value
			end)
		end
		return Instance
	end
	
	Create = function(...)
		local args = {...}
		if type(args) ~= "table" then return end
		local new = Instance.new(args[1])
		local Children = {}
		
		if type(args[2]) == "table" then
			SetProps(new, args[2])
			SetChildren(new, args[3])
			Children = args[3] or {}
		elseif typeof(args[2]) == "Instance" then
			new.Parent = args[2]
			SetProps(new, args[3])
			SetChildren(new, args[4])
			Children = args[4] or {}
		end
		return new
	end
	
	local function Save(file)
		if readfile and isfile and isfile(file) then
			local decode = HttpService:JSONDecode(readfile(file))
			
			if type(decode) == "table" then
				if rawget(decode, "UISize") then splib.Save["UISize"] = decode["UISize"] end
				if rawget(decode, "TabSize") then splib.Save["TabSize"] = decode["TabSize"] end
				if rawget(decode, "Theme") and VerifyTheme(decode["Theme"]) then splib.Save["Theme"] = decode["Theme"] end
			end
		end
	end
	
	pcall(Save, "sp library v2.json")
end

local Funcs = {} do
	function Funcs:InsertCallback(tab, func)
		if type(func) == "function" then
			table.insert(tab, func)
		end
		return func
	end
	
	function Funcs:FireCallback(tab, ...)
		for _,v in ipairs(tab) do
			if type(v) == "function" then
				task.spawn(v, ...)
			end
		end
	end
	
	function Funcs:ToggleVisible(Obj, Bool)
		Obj.Visible = Bool ~= nil and Bool or Obj.Visible
	end
	
	function Funcs:ToggleParent(Obj, Parent)
		if Bool ~= nil then
			Obj.Parent = Bool
		else
			Obj.Parent = not Obj.Parent and Parent
		end
	end
	
	function Funcs:GetConnectionFunctions(ConnectedFuncs, func)
		local Connected = { Function = func, Connected = true }
		
		function Connected:Disconnect()
			if self.Connected then
				table.remove(ConnectedFuncs, table.find(ConnectedFuncs, self.Function))
				self.Connected = false
			end
		end
		
		function Connected:Fire(...)
			if self.Connected then
				task.spawn(self.Function, ...)
			end
		end
		
		return Connected
	end
	
	function Funcs:GetCallback(Configs, index)
		local func = Configs[index] or Configs.Callback or function() end
		
		if type(func) == "table" then
			return ({function(Value) func[1][func[2]] = Value end})
		end
		return {func}
	end
end

local Connections, Connection = {}, splib.Connection do
	local function NewConnectionList(List)
		if type(List) ~= "table" then return end
		
		for _,CoName in ipairs(List) do
			local ConnectedFuncs, Connect = {}, {}
			Connection[CoName] = Connect
			Connections[CoName] = ConnectedFuncs
			Connect.Name = CoName
			
			function Connect:Connect(func)
				if type(func) == "function" then
					table.insert(ConnectedFuncs, func)
					return Funcs:GetConnectionFunctions(ConnectedFuncs, func)
				end
			end
			
			function Connect:Once(func)
				if type(func) == "function" then
					local Connected;
					
					local _NFunc;_NFunc = function(...)
						task.spawn(func, ...)
						Connected:Disconnect()
					end
					
					Connected = Funcs:GetConnectionFunctions(ConnectedFuncs, _NFunc)
					return Connected
				end
			end
		end
	end
	
	function Connection:FireConnection(CoName, ...)
		local Connection = type(CoName) == "string" and Connections[CoName] or Connections[CoName.Name]
		for _,Func in pairs(Connection) do
			task.spawn(Func, ...)
		end
	end
	
	NewConnectionList({"FlagsChanged", "ThemeChanged", "FileSaved", "ThemeChanging", "OptionAdded"})
end

local GetFlag, SetFlag, CheckFlag do
	CheckFlag = function(Name)
		return type(Name) == "string" and Flags[Name] ~= nil
	end
	
	GetFlag = function(Name)
		return type(Name) == "string" and Flags[Name]
	end
	
	SetFlag = function(Flag, Value)
		if Flag and (Value ~= Flags[Flag] or type(Value) == "table") then
			Flags[Flag] = Value
			Connection:FireConnection("FlagsChanged", Flag, Value)
		end
	end
	
	local db
	Connection.FlagsChanged:Connect(function(Flag, Value)
		local ScriptFile = Settings.ScriptFile
		if not db and ScriptFile and writefile then
			db=true;task.wait(0.1);db=false
			
			local Success, Encoded = pcall(function()
				-- local _Flags = {}
				-- for _,Flag in pairs(Flags) do _Flags[_] = Flag.Value end
				return HttpService:JSONEncode(Flags)
			end)
			
			if Success then
				local Success = pcall(writefile, ScriptFile, Encoded)
				if Success then
					Connection:FireConnection("FileSaved", "Script-Flags", ScriptFile, Encoded)
				end
			end
		end
	end)
end

local saved = {}
if isfile("sp library v2.json") then
  local ok,data = pcall(HttpService.JSONDecode, HttpService, readfile("sp library v2.json"))
  if ok and type(data)=="table" then saved = data end
end
splib.Save = {
  UISize  = saved.UISize  or splib.Save.UISize,
  TabSize = saved.TabSize or splib.Save.TabSize,
  Theme   = saved.Theme   or splib.Save.Theme,
}


local ScreenGui = Create("ScreenGui", CoreGui, {
	Name = "sp Library v2",
}, {
	Create("UIScale", {
		Scale = UIScale,
		Name = "Scale"
	})
})

local function GetStr(val)
	if type(val) == "function" then
		return val()
	end
	return val
end

local function ConnectSave(Instance, func)
	Instance.InputBegan:Connect(function(Input)
		if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
			while UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do task.wait()
			end
		end
		func()
	end)
end

local function CreateTween(Configs)
	local Instance = Configs[1] or Configs.Instance
	local Prop = Configs[2] or Configs.Prop
	local NewVal = Configs[3] or Configs.NewVal
	local Time = Configs[4] or Configs.Time or 0.5
	local TweenWait = Configs[5] or Configs.wait or false
	local TweenInfo = TweenInfo.new(Time, Enum.EasingStyle.Quint)
	
	local Tween = TweenService:Create(Instance, TweenInfo, {[Prop] = NewVal})
	Tween:Play()
	if TweenWait then
		Tween.Completed:Wait()
	end
	return Tween
end

local function AddDraggingFunctionality(DragPoint, Main)
    pcall(
        function()
            local Dragging, DragInput, MousePos, FramePos = false
            DragPoint.InputBegan:Connect(
                function(Input)
                    if
                        Input.UserInputType == Enum.UserInputType.MouseButton1 or
                            Input.UserInputType == Enum.UserInputType.Touch
                     then
                        Dragging = true
                        MousePos = Input.Position
                        FramePos = Main.Position

                        Input.Changed:Connect(
                            function()
                                if Input.UserInputState == Enum.UserInputState.End then
                                    Dragging = false
                                end
                            end
                        )
                    end
                end
            )

            DragPoint.InputChanged:Connect(
                function(Input)
                    if
                        Input.UserInputType == Enum.UserInputType.MouseMovement or
                            Input.UserInputType == Enum.UserInputType.Touch
                     then
                        DragInput = Input
                    end
                end
            )

            UserInputService.InputChanged:Connect(
                function(Input)
                    if Input == DragInput and Dragging then
                        local Delta = Input.Position - MousePos
                        TweenService:Create(
                            Main,
                            TweenInfo.new(0.45, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),
                            {
                                Position = UDim2.new(
                                    FramePos.X.Scale,
                                    FramePos.X.Offset + Delta.X,
                                    FramePos.Y.Scale,
                                    FramePos.Y.Offset + Delta.Y
                                )
                            }
                        ):Play()
                    end
                end
            )
        end
    )
end

local function MakeDrag(Instance)
    SetProps(Instance, {
        Active = true,
        AutoButtonColor = false
    })

    AddDraggingFunctionality(Instance, Instance)

    return Instance
end

local function VerifyTheme(Theme)
	for name,_ in pairs(splib.Themes) do
		if name == Theme then
			return true
		end
	end
end

local function SaveJson(FileName, save)
	if writefile then
		local json = HttpService:JSONEncode(save)
		writefile(FileName, json)
	end
end

local Theme = splib.Themes[splib.Save.Theme]

local function AddEle(Name, Func)
	splib.Elements[Name] = Func
end

local function Make(Ele, Instance, props, ...)
	local Element = splib.Elements[Ele](Instance, props, ...)
	return Element
end

AddEle("Corner", function(parent, CornerRadius)
	local New = SetProps(Create("UICorner", parent, {
		CornerRadius = CornerRadius or UDim.new(0, 7)
	}), props)
	return New
end)

AddEle("Stroke", function(parent, props, ...)
	local args = {...}
	local New = InsertTheme(SetProps(Create("UIStroke", parent, {
		Color = args[1] or Theme["Color Stroke"],
		Thickness = args[2] or 1,
		ApplyStrokeMode = "Border"
	}), props), "Stroke")
	return New
end)

AddEle("Button", function(parent, props, ...)
	local args = {...}
	local New = InsertTheme(SetProps(Create("TextButton", parent, {
		Text = "",
		Size = UDim2.fromScale(1, 1),
		BackgroundColor3 = Theme["Color Hub 2"],
		AutoButtonColor = false
	}), props), "Frame")
	
	New.MouseEnter:Connect(function()
		New.BackgroundTransparency = 0.4
	end)
	New.MouseLeave:Connect(function()
		New.BackgroundTransparency = 0
	end)
	if args[1] then
		New.Activated:Connect(args[1])
	end
	return New
end)

AddEle("Gradient", function(parent, props, ...)
	local args = {...}
	local New = InsertTheme(SetProps(Create("UIGradient", parent, {
		Color = Theme["Color Hub 1"]
	}), props), "Gradient")
	return New
end)

local function ButtonFrame(parent, Title, Description, HolderSize, isBind)
    if type(HolderSize) == "boolean" then
        isBind, HolderSize = HolderSize, nil
    end

    local Frame = Make("Button", parent, {
        Size = UDim2.new(1, 0, 0, 25),
        Name = "Option"
    })
    Make("Corner", Frame, UDim.new(0, 6))

    local TitleL = InsertTheme(Create("TextLabel", Frame, {
        Font = Enum.Font.GothamMedium,
        TextColor3 = Theme["Color Text"],
        AutomaticSize = "Y",
        Size = UDim2.new(1, -80, 0, 0),
        Position = UDim2.new(0, 0, 0.5),
        AnchorPoint = Vector2.new(0, 0.5),
        BackgroundTransparency = 1,
        TextSize = 10,
        TextXAlignment = "Left",
        TextTruncate = "AtEnd",
        Text = Title or "",
        RichText = true
    }), "Text")

    local DescL = InsertTheme(Create("TextLabel", Frame, {
        Font = Enum.Font.Gotham,
        TextColor3 = Theme["Color Dark Text"],
        AutomaticSize = "Y",
        Size = UDim2.new(1, -80, 0, 0),
        Position = UDim2.new(0, 12, 0, 15),
        BackgroundTransparency = 1,
        TextWrapped = true,
        TextSize = 8,
        TextXAlignment = "Left",
        Text = Description or "",
        RichText = true
    }), "DarkText")

    local LabelHolder = Create("Frame", Frame, {
        AutomaticSize = "Y",
        BackgroundTransparency = 1,
        Size = HolderSize or UDim2.new(1, -80, 0, 25),
        Position = UDim2.new(0, 10, 0),
        AnchorPoint = Vector2.new(0, 0)
    }, {
        Create("UIListLayout", {
            SortOrder = "LayoutOrder",
            VerticalAlignment = "Center",
            Padding = UDim.new(0, 2)
        }),
        Create("UIPadding", {
            PaddingTop    = UDim.new(0, 5),
            PaddingBottom = UDim.new(0, 5)
        }),
        TitleL,
        DescL,
    })

    local bindBox
    if isBind then
        bindBox = InsertTheme(Create("TextButton", Frame, {
            Name               = "BindBox",
            Text               = "...",
            Font               = Enum.Font.GothamBold,
            TextSize           = 14,
            TextColor3         = Color3.fromRGB(255,255,255),
            Size               = UDim2.new(0, 45, 0, 24),
            Position           = UDim2.new(1, -10, 0, 3),
            AnchorPoint        = Vector2.new(1, 0),
            BackgroundColor3   = Color3.fromRGB(0,0,0),
            BackgroundTransparency = 0,
        }), "Stroke")
Make("Corner", bindBox, UDim.new(0.25, 0))

        Frame.Size = UDim2.new(1, 0, 0, 30)
        bindBox:GetPropertyChangedSignal("Text"):Connect(function()
            local newWidth = bindBox.TextBounds.X + 8
            local tween = TweenService:Create(
                bindBox,
                TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),
                {Size = UDim2.new(0, newWidth, 0, 24)}
            )
            tween:Play()
        end)
    end

    local Label = {}
    function Label:SetTitle(nt)
        if type(nt)=="string" and nt:match("%S") then
            TitleL.Text = nt
        end
    end
    function Label:SetDesc(nd)
        if type(nd)=="string" and nd:match("%S") then
            DescL.Visible, DescL.Text = true, nd
            LabelHolder.Position, LabelHolder.AnchorPoint = UDim2.new(0,10,0), Vector2.new(0,0)
        else
            DescL.Visible, DescL.Text = false, ""
            LabelHolder.Position, LabelHolder.AnchorPoint = UDim2.new(0,10,0.5), Vector2.new(0,0.5)
        end
    end
    Label:SetTitle(Title)
    Label:SetDesc(Description)

    return Frame, Label, bindBox, ColorBox
end
local function GetColor(Instance)
	if not Instance then return nil end

	if Instance:IsA("TextLabel") or Instance:IsA("TextBox") or Instance:IsA("TextButton") then
		return "TextColor3"
	elseif Instance:IsA("Frame") or Instance:IsA("ScrollingFrame") then
		return "BackgroundColor3"
	elseif Instance:IsA("ImageLabel") then
		return "ImageColor3"
	elseif Instance:IsA("UIStroke") then
		return "Color"
	elseif Instance:IsA("UIGradient") then
		return "Color"
	end

	return nil
end

-- /////////// --
function splib:GetIcon(index)
	if type(index) ~= "string" or index:find("rbxassetid://") or #index == 0 then
		return index
	end
	
	local firstMatch = nil
	index = string.lower(index):gsub("lucide", ""):gsub("-", "")
	
	if self.Icons[index] then
	  return self.Icons[index]
	end
	
	for Name, Icon in self.Icons do
		if Name == index then
			return Icon
		elseif not firstMatch and Name:find(index, 1, true) then
			firstMatch = Icon
		end
	end
	
	return firstMatch or index
end

function splib:SetTheme(NewTheme)
	if not VerifyTheme(NewTheme) then return end
	
	splib.Save.Theme = NewTheme
	SaveJson("sp library v2.json", splib.Save)
	Theme = splib.Themes[NewTheme]
	
	Connection:FireConnection("ThemeChanged", NewTheme)
	table.foreach(splib.Instances, function(_,Val)
		if Val.Type == "Gradient" then
			Val.Instance.Color = Theme["Color Hub 1"]
		elseif Val.Type == "Frame" then
			Val.Instance.BackgroundColor3 = Theme["Color Hub 2"]
		elseif Val.Type == "Stroke" then
			Val.Instance[GetColor(Val.Instance)] = Theme["Color Stroke"]
		elseif Val.Type == "Theme" then
			Val.Instance[GetColor(Val.Instance)] = Theme["Color Theme"]
		elseif Val.Type == "Text" then
			Val.Instance[GetColor(Val.Instance)] = Theme["Color Text"]
		elseif Val.Type == "DarkText" then
			Val.Instance[GetColor(Val.Instance)] = Theme["Color Dark Text"]
		elseif Val.Type == "ScrollBar" then
			Val.Instance[GetColor(Val.Instance)] = Theme["Color Theme"]
		end
	end)
end

function splib:SetScale(NewScale)
	NewScale = ViewportSize.Y / math.clamp(NewScale, 300, 2000)
	UIScale, ScreenGui.Scale.Scale = NewScale, NewScale
end

function splib:MakeWindow(Configs)

    local ToggleIcon = tostring(Configs.ToggleIcon or "rbxassetid://86434410365514")
    local WTitle     = Configs[1] or Configs.Name or Configs.Title or "SP Lib v2"
    local WMiniText  = Configs[2] or Configs.SubTitle or Configs.SubName or "by : nickkjkj (thanks for the UI)"


function splib:MakeWindow(Configs)

    local WTitle     = Configs[1] or Configs.Name or Configs.Title or "SP Lib v2"
    local WMiniText  = Configs[2] or Configs.SubTitle or Configs.SubName or "by: boo"

    Settings.ScriptFile = Configs[3] or Configs.ConfigFolder or Configs.SaveFolder or false
    
   local EnableSetting = (Configs.Setting or Configs.ShowSetting) == true
   local ToggleIcon = tostring(Configs.ToggleIcon or "rbxassetid://86434410365514")
    local HidePremium  = Configs.HidePremium == true
    local SaveConfig   = Configs.SaveConfig == true
    local Callback = Configs.Callback or function() end
    local CloseCallback = Configs.CloseCallback or false

    if Configs.IntroEnabled == nil then
        Configs.IntroEnabled = true
    end
    Configs.IntroText = Configs.IntroText or "SP Lib v2"
    Configs.IntroIcon = Configs.IntroIcon or "rbxassetid://8834748103"

    local function LoadSequence()
        MainWindow.Visible = false
        local LoadSequenceLogo = SetProps(
            MakeElement("Image", Configs.IntroIcon),
            {
                Parent = ScreenGui,
                AnchorPoint = Vector2.new(0.5, 0.5),
                Position = UDim2.new(0.5, 0, 0.4, 0),
                Size = UDim2.new(0, 28, 0, 28),
                ImageColor3 = Color3.fromRGB(255, 255, 255),
                ImageTransparency = 1
            }
        )
        local LoadSequenceText = SetProps(
            MakeElement("Label", Configs.IntroText, 14),
            {
                Parent = ScreenGui,
                Size = UDim2.new(1, 0, 1, 0),
                AnchorPoint = Vector2.new(0.5, 0.5),
                Position = UDim2.new(0.5, 19, 0.5, 0),
                TextXAlignment = Enum.TextXAlignment.Center,
                Font = Enum.Font.GothamBold,
                TextTransparency = 1
            }
        )
        TweenService:Create(LoadSequenceLogo, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {ImageTransparency = 0, Position = UDim2.new(0.5, 0, 0.5, 0)}):Play()
        wait(0.8)
        TweenService:Create(LoadSequenceLogo, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {Position = UDim2.new(0.5, -(LoadSequenceText.TextBounds.X / 2), 0.5, 0)}):Play()
        wait(0.3)
        TweenService:Create(LoadSequenceText, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 0}):Play()
        wait(2)
        TweenService:Create(LoadSequenceText, TweenInfo.new(.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), {TextTransparency = 1}):Play()
        MainWindow.Visible = true
        LoadSequenceLogo:Destroy()
        LoadSequenceText:Destroy()
    end

    if Configs.IntroEnabled then
        LoadSequence()
    end

    local function LoadFile()
        local File = Settings.ScriptFile
        if type(File) ~= "string" then return end
        if not readfile or not isfile then return end
        if pcall(isfile, File) then
            local raw = readfile(File)
            local ok, t = pcall(HttpService.JSONDecode, HttpService, raw)
            if ok and type(t)=="table" then
                Flags = t
            end
        end
    end; LoadFile()

   
    if HidePremium then
        for _, el in ipairs(Window:GetPremiumElements()) do
            el.Visible = false
        end
    end

    local function saveSettings()
        if not SaveConfig then return end
        if not isfolder(Settings.ConfigFolder) then
            makefolder(Settings.ConfigFolder)
        end
        local filePath = Settings.ConfigFolder.."/config.json"
        writefile(filePath, HttpService:JSONEncode(Flags))
    end
    Window.SomeToggle.Changed:Connect(function(val)
        Flags.SomeToggle = val
        saveSettings()
    end)

    if SaveConfig then
        Window.CloseButton.MouseButton1Click:Connect(function()
            saveSettings()
        end)
    end

    return Window
end
	
	local UISizeX, UISizeY = unpack(splib.Save.UISize)
	local MainFrame = InsertTheme(Create("ImageButton", ScreenGui, {
		Size = UDim2.fromOffset(UISizeX, UISizeY),
		Position = UDim2.new(0.5, -UISizeX/2, 0.5, -UISizeY/2),
		BackgroundTransparency = 0.03,
		Name = "Hub"
	}), "Main")MakeDrag(MainFrame)
	Make("Gradient", MainFrame, {
		Rotation = 45
	})
	
	local MainCorner = Make("Corner", MainFrame)
	
	local Components = Create("Folder", MainFrame, {
		Name = "Components"
	})
	
	local DropdownHolder = Create("Folder", ScreenGui, {
		Name = "Dropdown"
	})

    local CustomColorHolder = Create("Folder", ScreenGui, {
	    Name = "CustomColor"
    })
	
	local TopBar = Create("Frame", Components, {
		Size = UDim2.new(1, 0, 0, 28),
		BackgroundTransparency = 1,
		Name = "Top Bar"
	})

	local Title = InsertTheme(Create("TextLabel", TopBar, {
		Position = UDim2.new(0, 15, 0.5),
		AnchorPoint = Vector2.new(0, 0.5),
		AutomaticSize = "XY",
		Text = WTitle,
		TextXAlignment = "Left",
		TextSize = 12,
		TextColor3 = Theme["Color Text"],
		BackgroundTransparency = 1,
		Font = Enum.Font.GothamMedium,
		Name = "Title"
	}, {
		InsertTheme(Create("TextLabel", {
			Size = UDim2.fromScale(0, 1),
			AutomaticSize = "X",
			AnchorPoint = Vector2.new(0, 1),
			Position = UDim2.new(1, 5, 0.9),
			Text = WMiniText,
			TextColor3 = Theme["Color Dark Text"],
			BackgroundTransparency = 1,
			TextXAlignment = "Left",
			TextYAlignment = "Bottom",
			TextSize = 8,
			Font = Enum.Font.Gotham,
			Name = "SubTitle"
		}), "DarkText")
	}), "Text")
	
	local MainScroll = InsertTheme(Create("ScrollingFrame", Components, {
		Size = UDim2.new(0, splib.Save.TabSize, 1, -TopBar.Size.Y.Offset),
		ScrollBarImageColor3 = Theme["Color Theme"],
		Position = UDim2.new(0, 0, 1, 0),
		AnchorPoint = Vector2.new(0, 1),
		ScrollBarThickness = 1.5,
		BackgroundTransparency = 1,
		ScrollBarImageTransparency = 0.2,
		CanvasSize = UDim2.new(),
		AutomaticCanvasSize = "Y",
		ScrollingDirection = "Y",
		BorderSizePixel = 0,
		Name = "Tab Scroll"
	}, {
		Create("UIPadding", {
			PaddingLeft = UDim.new(0, 10),
			PaddingRight = UDim.new(0, 10),
			PaddingTop = UDim.new(0, 10),
			PaddingBottom = UDim.new(0, 10)
		}), Create("UIListLayout", {
			Padding = UDim.new(0, 5)
		})
	}), "ScrollBar")

--[[
 local SearchBox = Create("TextBox", MainScroll, {
    Size = UDim2.new(1, 0, 0, 24),
    Position = UDim2.new(0, 0, 0, 0),
    BackgroundColor3 = Color3.fromRGB(13, 13, 13),
    PlaceholderText = "Search",
    Text = "",
    TextXAlignment = Enum.TextXAlignment.Left,
    TextTruncate = Enum.TextTruncate.AtEnd,
    TextColor3 = Color3.fromRGB(255, 255, 255),
    ClearTextOnFocus = false,
    Font = Enum.Font.Gotham,
    TextSize = 10,
    TextWrapped = false,
})
Make("Corner", SearchBox)
]]


	local Containers = Create("Frame", Components, {
		Size = UDim2.new(1, -MainScroll.Size.X.Offset, 1, -TopBar.Size.Y.Offset),
		AnchorPoint = Vector2.new(1, 1),
		Position = UDim2.new(1, 0, 1, 0),
		BackgroundTransparency = 1,
		ClipsDescendants = true,
		Name = "Containers"
	})
	
	local ControlSize1, ControlSize2 = MakeDrag(Create("ImageButton", MainFrame, {
		Size = UDim2.new(0, 35, 0, 35),
		Position = MainFrame.Size,
		Active = true,
		AnchorPoint = Vector2.new(0.8, 0.8),
		BackgroundTransparency = 1,
		Name = "Control Hub Size"
	})), MakeDrag(Create("ImageButton", MainFrame, {
		Size = UDim2.new(0, 20, 1, -30),
		Position = UDim2.new(0, MainScroll.Size.X.Offset, 1, 0),
		AnchorPoint = Vector2.new(0.5, 1),
		Active = true,
		BackgroundTransparency = 1,
		Name = "Control Tab Size"
	}))


local function ControlSize()
    local Pos1, Pos2 = ControlSize1.Position, ControlSize2.Position
    
    local minX, maxX
    local minY, maxY

    if isPC then
        minX, maxX = 300, 550
        minY, maxY = 250, 400
    else
        minX, maxX = 250, 400
        minY, maxY = 150, 250
    end

    ControlSize1.Position = UDim2.fromOffset(
        math.clamp(Pos1.X.Offset, minX, maxX),
        math.clamp(Pos1.Y.Offset, minY, maxY)
    )

    local Pos2 = ControlSize2.Position
    local minClamp = isPC and 50 or 100
    ControlSize2.Position = UDim2.new(0, math.clamp(Pos2.X.Offset, minClamp, 100), 1, 0)

    MainScroll.Size = UDim2.new(0, ControlSize2.Position.X.Offset, 1, -TopBar.Size.Y.Offset)
    Containers.Size = UDim2.new(1, -MainScroll.Size.X.Offset, 1, -TopBar.Size.Y.Offset)
    MainFrame.Size = ControlSize1.Position
end
	
ControlSize1:GetPropertyChangedSignal("Position"):Connect(ControlSize)
ControlSize2:GetPropertyChangedSignal("Position"):Connect(ControlSize)

local hoverConnections = {}
local originalSizeX    = 30
local expandedSizeX    = 160
local userSizeX        = originalSizeX
local minClamp         = isPC and 50 or 100

local function tweenControlSizeX(toX)
    local tweenInfo = TweenInfo.new(0.25, Enum.EasingStyle.Sine, Enum.EasingDirection.Out)
    local goal = { Position = UDim2.new(0, toX, 1, 0) }
    local tween = TweenService:Create(ControlSize2, tweenInfo, goal)
    tween:Play()
    tween.Completed:Connect(function()
        userSizeX = toX
        ControlSize()
    end)
end

local function enableSidebarHover()
    for _, conn in ipairs(hoverConnections) do
        if conn.Connected then conn:Disconnect() end
    end
    hoverConnections = {}

    table.insert(hoverConnections,
        MainScroll.MouseEnter:Connect(function()
            tweenControlSizeX(expandedSizeX)
        end)
    )
    table.insert(hoverConnections,
        MainScroll.MouseLeave:Connect(function()
            tweenControlSizeX(minClamp)
        end)
    )
end

local function disableSidebarHover()
    for _, conn in ipairs(hoverConnections) do
        if conn.Connected then conn:Disconnect() end
    end
    hoverConnections = {}

    tweenControlSizeX(expandedSizeX)
end

if isPC then
    ControlSize2.Position = UDim2.new(0, originalSizeX, 1, 0)
    ControlSize()

    if splib.Flags["sidebarHover"] and splib.Flags["sidebarHover"].Value then
        enableSidebarHover()
    end
end

ConnectSave(ControlSize1, function()
    if not Minimized then
        splib.Save.UISize = {MainFrame.Size.X.Offset, MainFrame.Size.Y.Offset}
        SaveJson("sp library v2 .json", splib.Save)
    end
end)

ConnectSave(ControlSize2, function()
    splib.Save.TabSize = MainScroll.Size.X.Offset
    SaveJson("sp library v2.json", splib.Save)
end)


	local ButtonsFolder = Create("Folder", TopBar, {
		Name = "Buttons"
	})
	
	local CloseButton = Create("ImageButton", {
		Size = UDim2.new(0, 14, 0, 14),
		Position = UDim2.new(1, -10, 0.5),
		AnchorPoint = Vector2.new(1, 0.5),
		BackgroundTransparency = 1,
		Image = "rbxassetid://10747384394",
		AutoButtonColor = false,
		Name = "Close"
	})

local EnableSetting = (Configs.Setting or Configs.ShowSetting) == true

local SettingButton = SetProps(CloseButton:Clone(), {
    Position = UDim2.new(1, -60, 0.5),
    Size = UDim2.new(0, 14, 0, 14),
    Image = "rbxassetid://10734950309",
    Name = "Settings",
    Visible = EnableSetting
})

	local MinimizeButton = SetProps(CloseButton:Clone(), {
		Position = UDim2.new(1, -35, 0.5),
		Image = "rbxassetid://10734896206",
		Name = "Minimize"
	})
	
	SetChildren(ButtonsFolder, {
		CloseButton,
		MinimizeButton,
        SettingButton
	})
	
	local Minimized, SaveSize, WaitClick
	local Window, FirstTab = {}, false

local bindConnections = {}
local shouldClearToggles = Configs.CloseCallback == true

CloseButton.Activated:Connect(function()
    for _, conn in ipairs(bindConnections) do
        if typeof(conn) == "RBXScriptConnection" and conn.Connected then
            conn:Disconnect()
        end
    end
    table.clear(bindConnections)

    splib:ClearAllBinds()

if shouldClearToggles then
    splib:ClearAllToggles()
end

    ScreenGui:Destroy()
end)

SettingButton.MouseButton1Click:Connect(function()
	for _, container in ipairs(ContainerList) do
		container.Visible = false
	end
	SettingTab.Visible = true
end)

	function Window:MinimizeBtn()
		if WaitClick then return end
		WaitClick = true
		
		if Minimized then
			MinimizeButton.Image = "rbxassetid://10734896206"
			CreateTween({MainFrame, "Size", SaveSize, 0.25, true})
			ControlSize1.Visible = true
			ControlSize2.Visible = true
			Minimized = false
		else
			MinimizeButton.Image = "rbxassetid://10734924532"
			SaveSize = MainFrame.Size
			ControlSize1.Visible = false
			ControlSize2.Visible = false
			CreateTween({MainFrame, "Size", UDim2.fromOffset(MainFrame.Size.X.Offset, 28), 0.25, true})
			Minimized = true
		end
		
		WaitClick = false
	end
	function Window:Minimize()
		MainFrame.Visible = not MainFrame.Visible
	end
	function Window:AddMinimizeButton(Configs)
		local Button = MakeDrag(Create("ImageButton", ScreenGui, {
			Size = UDim2.fromOffset(35, 35),
			Position = UDim2.fromScale(0.15, 0.15),
			BackgroundTransparency = 1,
			BackgroundColor3 = Theme["Color Hub 2"],
			AutoButtonColor = false
		}))
		
		local Stroke, Corner
		if Configs.Corner then
			Corner = Make("Corner", Button)
			SetProps(Corner, Configs.Corner)
		end
		if Configs.Stroke then
			Stroke = Make("Stroke", Button)
			SetProps(Stroke, Configs.Corner)
		end
		
		SetProps(Button, Configs.Button)
		Button.Activated:Connect(Window.Minimize)
		
		return {
			Stroke = Stroke,
			Corner = Corner,
			Button = Button
		}
	end

local tweenInfoHideUI = TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)

local OriginalPos = MainFrame.Position
local UIVisibleed = true

local function ToggleUI()
    UIHidden = not UIHidden

    if UIHidden then
        TweenService:Create(
            MainFrame,
            TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),
            {
                Position = MainFrame.Position + UDim2.new(0, 0, 0.1, 0),
            }
        ):Play()

        wait(0.1)
        MainFrame.Visible = false
    else
        MainFrame.Visible = true
        TweenService:Create(
            MainFrame,
            TweenInfo.new(0.5, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),
            {
                Position = MainFrame.Position - UDim2.new(0, 0, 0.1, 0),
            }
        ):Play()
    end
end


UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.RightShift then
        ToggleUI()
    end
end)

local boundaryConnections = {}
local originalMainPos = MainFrame.Position

local T = Instance.new("ImageButton", ScreenGui) 
local sizeValue = isPC and 50 or 38
T.Size = UDim2.new(0, sizeValue, 0, sizeValue)
local xPos = isPC and 0.10 or (isMobile and 0.10 or 0.10)
T.Position = UDim2.new(xPos, 0, 0.1, 0)
T.Image = tostring(ToggleIcon)
T.Active = true 
local Corner = Instance.new("UICorner", T)
Corner.CornerRadius = UDim.new(0, 14)

local isHolding    = false
local didLongPress = false
local holdTween    = nil
local startPos     = nil
local moved        = false
local propConn     = nil
local holdTask     = nil
local holdDuration = 1
local normalSizere = UDim2.new(0, sizeValue, 0, sizeValue)

local holdBar = Instance.new("Frame", T)
holdBar.AnchorPoint = Vector2.new(0, 1)
holdBar.Position  = UDim2.new(0, 0.92, 0.92, 0)
holdBar.Size = UDim2.new(0, 0, 0, 4)
holdBar.BackgroundColor3 = Color3.fromRGB(0, 162, 255)
holdBar.BorderSizePixel = 0
local HoCorner = Instance.new("UICorner", holdBar)
HoCorner.CornerRadius = UDim.new(0, 14)


local originalPosition = T.Position

local function doLongPress()
    TweenService:Create(MainFrame, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
        Position = originalMainPos
    }):Play()
end

AddDraggingFunctionality(T, T)

local function checkBounds()
  local absPos  = T.AbsolutePosition
  local absSize = T.AbsoluteSize
  local screen  = workspace.CurrentCamera.ViewportSize
  if absPos.X < 0
  or absPos.Y < 0
  or absPos.X + absSize.X > screen.X
  or absPos.Y + absSize.Y > screen.Y then
    TweenService:Create(T, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {
      Position = originalPosition
    }):Play()
  end
end

function enableBoundaryProtection()
  disableBoundaryProtection()
  boundaryConnections[#boundaryConnections+1] = T.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1
    or input.UserInputType == Enum.UserInputType.Touch then
      task.delay(0.25, checkBounds)
    end
  end)
end

function disableBoundaryProtection()
  for _, conn in ipairs(boundaryConnections) do
    if conn.Connected then conn:Disconnect() end
  end
  boundaryConnections = {}
end

T.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        isHolding = true
        didLongPress = false

        local startPos = T.Position
        local propConn
        local holdTween

        propConn = T:GetPropertyChangedSignal("Position"):Connect(function()
            if T.Position ~= startPos then
                if holdTween then
                    holdTween:Cancel()
                    holdTween = nil
                end
                TweenService:Create(holdBar, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
                    Size = UDim2.new(0, 0, 0, 4)
                }):Play()
                propConn:Disconnect()
            end
        end)

        holdBar.Size = UDim2.new(0, 0, 0, 4)
        holdTween = TweenService:Create(holdBar, TweenInfo.new(holdDuration, Enum.EasingStyle.Linear), {
            Size = UDim2.new(1, 0, 0, 4)
        })
        holdTween:Play()

        holdTween.Completed:Connect(function()
            if isHolding and T.Position == startPos then
                didLongPress = true
                doLongPress()
            end
        end)
    end
end)

T.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1
    or input.UserInputType == Enum.UserInputType.Touch then
        isHolding = false

        if holdTween then
            holdTween:Cancel()
            holdTween = nil
        end
        TweenService:Create(holdBar, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {
            Size = UDim2.new(0, 0, 0, 4)
        }):Play()

        if propConn then
            propConn:Disconnect()
            propConn = nil
        end
    end
end)

T.MouseButton1Click:Connect(function()
    if didLongPress then
        didLongPress = false
        return
    end
    ToggleUI()
end)

local normalSize = UDim2.new(0, sizeValue, 0, sizeValue)
local hoverSize = UDim2.new(0, sizeValue + 6, 0, sizeValue + 10)
local tweenInfo2 = TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)

local function getCenteredPosition(originalSize, newSize, originalPosition)
    local xOffset = (newSize.X.Offset - originalSize.X.Offset) / 2
    local yOffset = (newSize.Y.Offset - originalSize.Y.Offset) / 2
    return UDim2.new(originalPosition.X.Scale, originalPosition.X.Offset - xOffset, originalPosition.Y.Scale, originalPosition.Y.Offset - yOffset)
end

T.MouseEnter:Connect(function()
    local hoverPosition = getCenteredPosition(normalSize, hoverSize, T.Position)
    TweenService:Create(T, tweenInfo2, {Size = hoverSize, Position = hoverPosition}):Play()
end)

T.MouseLeave:Connect(function()
    local normalPosition = getCenteredPosition(hoverSize, normalSize, T.Position)
    TweenService:Create(T, tweenInfo2, {Size = normalSize, Position = normalPosition}):Play()
end)

T.MouseButton1Click:Connect(function()
    local growTween = TweenService:Create(T, tweenInfo2, {Size = hoverSize})
    growTween:Play()

    local shineIn = TweenService:Create(T, TweenInfo.new(0.1, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {ImageTransparency = 0.6})
    local shineOut = TweenService:Create(T, TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.Out), {ImageTransparency = 0})

    shineIn:Play()
    shineIn.Completed:Wait()
    shineOut:Play()
end)

	function Window:Set(Val1, Val2)
		if type(Val1) == "string" and type(Val2) == "string" then
			Title.Text = Val1
			Title.SubTitle.Text = Val2
		elseif type(Val1) == "string" then
			Title.Text = Val1
		end
	end
	function Window:Dialog(Configs)
		if MainFrame:FindFirstChild("Dialog") then return end
		if Minimized then
			Window:MinimizeBtn()
		end
		
		local DTitle = Configs[1] or Configs.Title or "Dialog"
		local DText = Configs[2] or Configs.Text or "This is a Dialog"
		local DOptions = Configs[3] or Configs.Options or {}
		
		local Frame = Create("Frame", {
			Active = true,
			Size = UDim2.fromOffset(250 * 1.08, 150 * 1.08),
			Position = UDim2.fromScale(0.5, 0.5),
			AnchorPoint = Vector2.new(0.5, 0.5)
		}, {
			InsertTheme(Create("TextLabel", {
				Font = Enum.Font.GothamBold,
				Size = UDim2.new(1, 0, 0, 20),
				Text = DTitle,
				TextXAlignment = "Left",
				TextColor3 = Theme["Color Text"],
				TextSize = 15,
				Position = UDim2.fromOffset(15, 5),
				BackgroundTransparency = 1
			}), "Text"),
			InsertTheme(Create("TextLabel", {
				Font = Enum.Font.GothamMedium,
				Size = UDim2.new(1, -25),
				AutomaticSize = "Y",
				Text = DText,
				TextXAlignment = "Left",
				TextColor3 = Theme["Color Dark Text"],
				TextSize = 12,
				Position = UDim2.fromOffset(15, 25),
				BackgroundTransparency = 1,
				TextWrapped = true
			}), "DarkText")
		})Make("Gradient", Frame, {Rotation = 270})Make("Corner", Frame)
		
		local ButtonsHolder = Create("Frame", Frame, {
			Size = UDim2.fromScale(1, 0.35),
			Position = UDim2.fromScale(0, 1),
			AnchorPoint = Vector2.new(0, 1),
			BackgroundColor3 = Theme["Color Hub 2"],
			BackgroundTransparency = 1
		}, {
			Create("UIListLayout", {
				Padding = UDim.new(0, 10),
				VerticalAlignment = "Center",
				FillDirection = "Horizontal",
				HorizontalAlignment = "Center"
			})
		})
		
		local Screen = InsertTheme(Create("Frame", MainFrame, {
			BackgroundTransparency = 0.6,
			Active = true,
			BackgroundColor3 = Theme["Color Hub 2"],
			Size = UDim2.new(1, 0, 1, 0),
			BackgroundColor3 = Theme["Color Stroke"],
			Name = "Dialog"
		}), "Stroke")
		
		MainCorner:Clone().Parent = Screen
		Frame.Parent = Screen
		CreateTween({Frame, "Size", UDim2.fromOffset(250, 150), 0.2})
		CreateTween({Frame, "Transparency", 0, 0.15})
		CreateTween({Screen, "Transparency", 0.3, 0.15})
		
		local ButtonCount, Dialog = 1, {}
		function Dialog:Button(Configs)
			local Name = Configs[1] or Configs.Name or Configs.Title or ""
			local Callback = Configs[2] or Configs.Callback or function()end
			
			ButtonCount = ButtonCount + 1
			local Button = Make("Button", ButtonsHolder)
			Make("Corner", Button)
			SetProps(Button, {
				Text = Name,
				Font = Enum.Font.GothamBold,
				TextColor3 = Theme["Color Text"],
				TextSize = 12
			})
			
			for _,Button in pairs(ButtonsHolder:GetChildren()) do
				if Button:IsA("TextButton") then
					Button.Size = UDim2.new(1 / ButtonCount, -(((ButtonCount - 1) * 20) / ButtonCount), 0, 32) -- Fluent Library :)
				end
			end
			Button.Activated:Connect(Dialog.Close)
			Button.Activated:Connect(Callback)
		end
		function Dialog:Close()
			CreateTween({Frame, "Size", UDim2.fromOffset(250 * 1.08, 150 * 1.08), 0.2})
			CreateTween({Screen, "Transparency", 1, 0.15})
			CreateTween({Frame, "Transparency", 1, 0.15, true})
			Screen:Destroy()
		end
		table.foreach(DOptions, function(_,Button)
			Dialog:Button(Button)
		end)
		return Dialog
	end
	function Window:SelectTab(TabSelect)
		if type(TabSelect) == "number" then
			splib.Tabs[TabSelect].func:Enable()
		else
			for _,Tab in pairs(splib.Tabs) do
				if Tab.Cont == TabSelect.Cont then
					Tab.func:Enable()
				end
			end
		end
	end
    local ContainerList = {}
function Window:MakeTab(paste, Configs)
		if type(paste) == "table" then Configs = paste end
		local TName = Configs[1] or Configs.Title or Configs.Name or "Tab!"
		local TIcon = Configs[2] or Configs.Icon or ""
        
    if Configs.IsMobile and not isMobile then
        return nil
    end

    if Configs.IsPC and not isPC then
        return nil
    end
		
		TIcon = splib:GetIcon(TIcon)
		if not TIcon:find("rbxassetid://") or TIcon:gsub("rbxassetid://", ""):len() < 6 then
			TIcon = false
		end
		
		local TabSelect = Make("Button", MainScroll, {
			Size = UDim2.new(1, 0, 0, 24)
		})Make("Corner", TabSelect)
		
		local LabelTitle = InsertTheme(Create("TextLabel", TabSelect, {
			Size = UDim2.new(1, TIcon and -25 or -15, 1),
			Position = UDim2.fromOffset(TIcon and 25 or 15),
			BackgroundTransparency = 1,
			Font = Enum.Font.GothamMedium,
			Text = TName,
			TextColor3 = Theme["Color Text"],
			TextSize = 9,
			TextXAlignment = Enum.TextXAlignment.Left,
			TextTransparency = (FirstTab and 0.3) or 0,
			TextTruncate = "AtEnd"
		}), "Text")
		
		local LabelIcon = InsertTheme(Create("ImageLabel", TabSelect, {
			Position = UDim2.new(0, 8, 0.5),
			Size = UDim2.new(0, 13, 0, 13),
			AnchorPoint = Vector2.new(0, 0.5),
			Image = TIcon or "",
			BackgroundTransparency = 1,
			ImageTransparency = (FirstTab and 0.3) or 0
		}), "Text")
		
		local Selected = InsertTheme(Create("Frame", TabSelect, {
			Size = FirstTab and UDim2.new(0, 4, 0, 4) or UDim2.new(0, 4, 0, 13),
			Position = UDim2.new(0, 1, 0.5),
			AnchorPoint = Vector2.new(0, 0.5),
			BackgroundColor3 = Theme["Color Theme"],
			BackgroundTransparency = FirstTab and 1 or 0
		}), "Theme")Make("Corner", Selected, UDim.new(0.5, 0))

 local SettingTab = InsertTheme(Create("ScrollingFrame", {
    Size = UDim2.new(1, 0, 1, 0),
    Position = UDim2.new(0, 0, 1),
    AnchorPoint = Vector2.new(0, 1),
    ScrollBarThickness = 1.5,
    BackgroundTransparency = 1,
    ScrollBarImageTransparency = 0.2,
    ScrollBarImageColor3 = Theme["Color Theme"],
    AutomaticCanvasSize = "Y",
    ScrollingDirection = "Y",
    BorderSizePixel = 0,
    CanvasSize = UDim2.new(),
    Name = "SettingsTab"
}, {
    Create("UIPadding", {
        PaddingLeft = UDim.new(0, 10),
        PaddingRight = UDim.new(0, 10),
        PaddingTop = UDim.new(0, 10),
        PaddingBottom = UDim.new(0, 10)
    }),
    Create("UIListLayout", {
        Padding = UDim.new(0, 5)
    })
}), "ScrollBar")

		local Container = InsertTheme(Create("ScrollingFrame", {
			Size = UDim2.new(1, 0, 1, 0),
			Position = UDim2.new(0, 0, 1),
			AnchorPoint = Vector2.new(0, 1),
			ScrollBarThickness = 1.5,
			BackgroundTransparency = 1,
			ScrollBarImageTransparency = 0.2,
			ScrollBarImageColor3 = Theme["Color Theme"],
			AutomaticCanvasSize = "Y",
			ScrollingDirection = "Y",
			BorderSizePixel = 0,
			CanvasSize = UDim2.new(),
			Name = ("Container %i [ %s ]"):format(#ContainerList + 1, TName)
		}, {
			Create("UIPadding", {
				PaddingLeft = UDim.new(0, 10),
				PaddingRight = UDim.new(0, 10),
				PaddingTop = UDim.new(0, 10),
				PaddingBottom = UDim.new(0, 10)
			}), Create("UIListLayout", {
				Padding = UDim.new(0, 5)
			})
		}), "ScrollBar")

		table.insert(ContainerList, SettingTab)
		table.insert(ContainerList, Container)
		
		if not FirstTab then Container.Parent = Containers end
		
		local Tab = { Enabled = (FirstTab == false) }
		
		local function Tabs()
			if Container.Parent then return end
			for _,Frame in pairs(ContainerList) do
				if Frame:IsA("ScrollingFrame") and Frame ~= Container then
					Frame.Parent = nil
				end
			end
			Container.Parent = Containers
			Container.Size = UDim2.new(1, 0, 1, 150)
			table.foreach(splib.Tabs, function(_,Tab)
				if Tab.Cont ~= Container then
					Tab.func:Disable()
				end
			end)
			Tab.Enabled = true
			CreateTween({Container, "Size", UDim2.new(1, 0, 1, 0), 0.5})
			CreateTween({LabelTitle, "TextTransparency", 0, 0.35})
			CreateTween({LabelIcon, "ImageTransparency", 0, 0.35})
			CreateTween({Selected, "Size", UDim2.new(0, 4, 0, 13), 0.50})
			CreateTween({Selected, "BackgroundTransparency", 0, 0.50})
		end
		TabSelect.Activated:Connect(Tabs)
		
        FirstTab = true
		table.insert(splib.Tabs, {TabInfo = {Name = TName, Icon = TIcon}, func = Tab, Cont = Container})
		Tab.Cont = Container
		if not table.find(ContainerList, SettingTab) then
    table.insert(ContainerList, SettingTab)
end

local SettingTabHandler = {
    Enabled = false
}

function SettingTabHandler:Enable()
    if SettingTab.Parent then return end
    for _, Frame in pairs(ContainerList) do
        if Frame:IsA("ScrollingFrame") and Frame ~= SettingTab then
            Frame.Parent = nil
        end
    end
    SettingTab.Parent = Containers
    SettingTab.Size = UDim2.new(1, 0, 1, 150)
    table.foreach(splib.Tabs, function(_, tab)
        if tab.Cont ~= SettingTab then
            tab.func:Disable()
        end
    end)

    SettingTabHandler.Enabled = true
    CreateTween({SettingTab, "Size", UDim2.new(1, 0, 1, 0), 0.5})
end

function SettingTabHandler:Disable()
    SettingTabHandler.Enabled = false
    SettingTab.Parent = nil
end

SettingButton.MouseButton1Click:Connect(function()
    SettingTabHandler:Enable()
end)
		function Tab:Disable()
		  self.Enabled = false
			Container.Parent = nil
			CreateTween({LabelTitle, "TextTransparency", 0.3, 0.35})
			CreateTween({LabelIcon, "ImageTransparency", 0.3, 0.35})
			CreateTween({Selected, "Size", UDim2.new(0, 4, 0, 4), 0.50})
			CreateTween({Selected, "BackgroundTransparency", 1, 0.50})
		end
		function Tab:Enable()
			Tabs()
		end
		function Tab:Visible(Bool)
			Funcs:ToggleVisible(TabSelect, Bool)
			Funcs:ToggleParent(Container, Bool, Containers)
		end
		function Tab:Destroy() TabSelect:Destroy() Container:Destroy() end
		function Tab:AddSection(Configs)
			local SectionName = type(Configs) == "string" and Configs or Configs[1] or Configs.Name or Configs.Title or Configs.Section
			
            if Configs.IsMobile and not isMobile then
                return nil
            end

            if Configs.IsPC and not isPC then
                return nil
            end

            local container = Configs.__force_container or Container

			local SectionFrame = Create("Frame", container, {
				Size = UDim2.new(1, 0, 0, 20),
				BackgroundTransparency = 1,
				Name = "Option"
			})
			
			local SectionLabel = InsertTheme(Create("TextLabel", SectionFrame, {
				Font = Enum.Font.GothamBold,
				Text = SectionName,
				TextColor3 = Theme["Color Text"],
				Size = UDim2.new(1, -25, 1, 0),
				Position = UDim2.new(0, 5),
				BackgroundTransparency = 1,
				TextTruncate = "AtEnd",
				TextSize = 14,
				TextXAlignment = "Left"
			}), "Text")
			
			local Section = {}
			table.insert(splib.Options, {type = "Section", Name = SectionName, func = Section})
			function Section:Visible(Bool)
				if Bool == nil then SectionFrame.Visible = not SectionFrame.Visible return end
				SectionFrame.Visible = Bool
			end
			function Section:Destroy()
				SectionFrame:Destroy()
			end
			function Section:Set(New)
				if New then
					SectionLabel.Text = GetStr(New)
				end
			end
			return Section
		end

local function SaveFlagValue(flag, value)
  local filename = "sp lib v2.json"
  local data = {}

  if isfile(filename) then
    local ok, existing = pcall(function()
      return HttpService:JSONDecode(readfile(filename))
    end)
    if ok and type(existing) == "table" then
      data = existing
    end
  end

  data[flag] = value

  local ok, encoded = pcall(function()
    return HttpService:JSONEncode(data)
  end)
  if ok then
    writefile(filename, encoded)
  end
end

local function LoadFlagValue(flag)
    local filename = "sp lib v2.json"
    if not isfile(filename) then
        return nil
    end

    local ok, data = pcall(function()
        return HttpService:JSONDecode(readfile(filename))
    end)
    if not ok or type(data) ~= "table" then
        return nil
    end

    return data[flag]
end

local function SaveDropdownFlag(flag, value)
	local data = {}

	if isfile(DropdownsFile) then
		local ok, existing = pcall(function()
			return HttpService:JSONDecode(readfile(DropdownsFile))
		end)
		if ok and type(existing) == "table" then
			data = existing
		end
	end

	data[flag] = value

	local ok, encoded = pcall(function()
		return HttpService:JSONEncode(data)
	end)

	if ok then
		writefile(DropdownsFile, encoded)
	end
end

local function LoadDropdownFlag(flag)
	if isfile(DropdownsFile) then
		local ok, existing = pcall(function()
			return HttpService:JSONDecode(readfile(DropdownsFile))
		end)
		if ok and type(existing) == "table" then
			return existing[flag]
		end
	end
	return nil
end

local BindsFile = "binds.json"
local function SaveBindFlag(flag, keyName)
    local data = {}
    if isfile(BindsFile) then
        local ok, existing = pcall(function()
            return HttpService:JSONDecode(readfile(BindsFile))
        end)
        if ok and type(existing) == "table" then
            data = existing
        end
    end

    data[flag] = keyName

    local ok, encoded = pcall(function()
        return HttpService:JSONEncode(data)
    end)
    if ok then
        writefile(BindsFile, encoded)
    end
end

local function LoadBindFlag(flag)
    if isfile(BindsFile) then
        local ok, existing = pcall(function()
            return HttpService:JSONDecode(readfile(BindsFile))
        end)
        if ok and type(existing) == "table" then
            return existing[flag]
        end
    end
    return nil
end

function splib:MakeNotification(Configs)
	if isNotificationCooldown then return end
	isNotificationCooldown = true
	task.delay(0.5, function()
		isNotificationCooldown = false
	end)

	if type(Configs) == "string" then
		Configs = { Name = Configs }
	elseif type(Configs) ~= "table" then
		Configs = {}
	end
    Configs.Name     = Configs.Name     or "Notification"
    Configs.Content  = Configs.Content  or "This is a test."
    Configs.Image    = Configs.Image    or "rbxassetid://4384403532"
    Configs.Time     = Configs.Time     or 4
    Configs.IsMobile = Configs.IsMobile or false
    Configs.IsPC     = Configs.IsPC     or false

    if Configs.IsMobile and not isMobile then return end
    if Configs.IsPC     and not isPC     then return end

local holder = self.NotificationHolder
if not holder then
    local isMobileSize = isMobile and 150 or 225

    holder = Create("Frame", ScreenGui, {
        Name                    = "NotificationHolder",
        AnchorPoint             = Vector2.new(1, 1),
        Position                = UDim2.new(1, -20, 1, -20),
        Size                    = UDim2.new(0, isMobileSize, 0, 0),
        BackgroundTransparency  = 1,
        AutomaticSize           = Enum.AutomaticSize.Y,
    })

    Create("UIListLayout", holder, {
        SortOrder               = Enum.SortOrder.LayoutOrder,
        VerticalAlignment       = Enum.VerticalAlignment.Bottom,
        Padding                 = UDim.new(0, 8),
    })

    self.NotificationHolder = holder
end

    local notifParent = Create("Frame", holder, {
        Name              = "NotifContainer",
        Size              = UDim2.new(1, 0, 0, 0),
        BackgroundColor3  = Theme["Color Hub 2"],
        BackgroundTransparency = 1,
        AutomaticSize     = Enum.AutomaticSize.Y,
        LayoutOrder       = #holder:GetChildren(),
    })

    local notifFrame = Create("Frame", notifParent, {
        Name              = "NotificationFrame",
        BackgroundColor3  = Theme["Color Stroke"],
        BackgroundTransparency = 0.,
        Size              = UDim2.new(1, 0, 0, 0),
        AutomaticSize     = Enum.AutomaticSize.Y,
    })
    InsertTheme(notifFrame, "Main")
    Make("Corner", notifFrame, UDim.new(0.25, 0))

    Create("UIStroke", notifFrame, {
        Color    = Theme["Color Text"],
        Thickness= 1.2,
    })

    Create("UIPadding", notifFrame, {
        PaddingLeft   = UDim.new(0, 12),
        PaddingTop    = UDim.new(0, 8),
        PaddingRight  = UDim.new(0, 12),
        PaddingBottom = UDim.new(0, 8),
    })

    local icon = Create("ImageLabel", notifFrame, {
        Name                  = "Icon",
        Size                  = UDim2.new(0, 24, 0, 24),
        Image                 = Configs.Image,
        BackgroundTransparency= 1,
        ScaleType             = Enum.ScaleType.Fit,
    })

    local title = Create("TextLabel", notifFrame, {
        Name                  = "Title",
        TextColor3 = Theme["Color Text"],
        Position              = UDim2.new(0, 30, 0, 0),
        Size                  = UDim2.new(1, -30, 0, 20),
        Font                  = Enum.Font.GothamBold,
        TextSize              = isPC and 16 or 12,
        Text                  = Configs.Name,
        BackgroundTransparency= 1,
    })
    InsertTheme(title, "Text")

    local content = Create("TextLabel", notifFrame, {
        Name                  = "Content",
        TextColor3 = Theme["Color Text"],
        Position              = UDim2.new(0, 0, 0, 26),
        Size                  = UDim2.new(1, 0, 0, 0),
        Font                  = Enum.Font.Gotham,
        TextSize              = 14,
        Text                  = Configs.Content,
        TextWrapped           = true,
        BackgroundTransparency= 1,
        AutomaticSize         = Enum.AutomaticSize.Y,
    })
    InsertTheme(content, "Text")

    notifFrame.Position = UDim2.new(1, 0, 0, 0)
    TweenService:Create(
        notifFrame,
        TweenInfo.new(0.4, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),
        { Position = UDim2.new(0, 0, 0, 0) }
    ):Play()

    task.spawn(function()
        wait(math.max(Configs.Time - 0.8, 0))
        TweenService:Create(icon, TweenInfo.new(0.6), { ImageTransparency = 1 }):Play()
        TweenService:Create(notifFrame, TweenInfo.new(0.6), { BackgroundTransparency = 0.7 }):Play()
        wait(0.3)
        TweenService:Create(
            notifFrame,
            TweenInfo.new(0.6, Enum.EasingStyle.Quint, Enum.EasingDirection.In),
            { Position = UDim2.new(1, 0, 0, 0) }
        ):Play()
        wait(0.6)
        notifParent:Destroy()
    end)
end

function Tab:AddLabel(Configs)
           if type(Configs) == "string" then
              Configs = { Configs }
           end
            local PName = Configs[1] or Configs.Title or "Label"
            local PDesc = Configs[2] or Configs.Text or ""

            if Configs.IsMobile and not isMobile then
                return nil
            end

            if Configs.IsPC and not isPC then
                return nil
            end

			local container = Configs.__force_container or Container
			local Frame, LabelFunc = ButtonFrame(container, PName, PDesc, UDim2.new(1, -20))
			
			local Label = {}
			function Label:Visible(...) Funcs:ToggleVisible(Frame, ...) end
			function Label:Destroy() Frame:Destroy() end
			function Label:SetTitle(Val)
				LabelFunc:SetTitle(GetStr(Val))
			end
			function Label:Set(Val1, Val2)
				if Val1 then
					LabelFunc:SetTitle(GetStr(Val1))
				end
			end
			return Label
		end

local Binds = {}

function Tab:AddBind(Configs)
    if type(Configs) == "string" then
        Configs = { Name = Configs }
    end

    local Name     = Configs.Name     or Configs.Title or "Bind"
    local Desc     = Configs.Desc     or Configs.Description or ""
    local Default  = Configs.Default  or Enum.KeyCode.Unknown
    local Hold     = Configs.Hold     or false
    local Callback = Configs.Callback or function() end
    local Flag     = Configs.Flag     or nil
    local Save     = Configs.Save     or false

    if Flag then
        local savedName = LoadBindFlag(Flag)
        if savedName then
            local ok, keyCode = pcall(function()
                return Enum.KeyCode[savedName]
            end)
            if ok and keyCode then
                Default = keyCode
            end
        end
    end

    if Configs.IsMobile and not isMobile then return nil end
    if Configs.IsPC     and not isPC     then return nil end

    local Frame, LabelFunc, BindBox = ButtonFrame(Container, Name, Desc, UDim2.new(1, -20), true)

    local state = {
        Value   = Default,
        Binding = false,
        Hold    = Hold,
        Save    = Save,
    }
    local Holding = false

    local function updateDisplay()
        local nm = (typeof(state.Value) == "EnumItem" and state.Value.Name) or tostring(state.Value)
        BindBox.Text = nm
    end
    updateDisplay()

local recentlyBound = false

Frame.Activated:Connect(function()
	if state.Binding then return end
	state.Binding = true
	BindBox.Text = "..."

	local conn
	conn = UserInputService.InputBegan:Connect(function(input, gp)

		if state.Binding then
			if input.UserInputType ~= Enum.UserInputType.Keyboard then
				BindBox.Text = "Invalid"
				task.wait(0.5)
				updateDisplay()
				state.Binding = false
				conn:Disconnect()
				return
			end

			local newKey
			if input.KeyCode and input.KeyCode ~= Enum.KeyCode.Unknown then
				newKey = input.KeyCode
			end

			if newKey then
				state.Value = newKey
				updateDisplay()

		       if Flag then
                   SaveBindFlag(Flag, newKey.Name)
               end

				recentlyBound = true
                wait(.3)
				recentlyBound = false

				if Flag then splib.Flags[Flag] = state end
				if state.Save then SaveCfg(game.GameId) end
			end

			state.Binding = false
			conn:Disconnect()
		end
	end)
end)

local inputConnection = UserInputService.InputBegan:Connect(function(input, gp)
	if state.Binding then return end

	local match = false
	if typeof(state.Value) == "EnumItem" then
		if input.KeyCode == state.Value then
			match = true
		elseif input.UserInputType == state.Value then
			match = true
		end
	end

	if match then
		if state.Hold then
			Holding = true
			Callback(Holding)
		else
			Callback()
		end
	end
end)

table.insert(bindConnections, inputConnection)


    UserInputService.InputEnded:Connect(function(input)
        if state.Hold and input.KeyCode == state.Value then
            Holding = false
            Callback(Holding)
        end
    end)

    local objBind = {}
    function objBind:Get() return state.Value end
    function objBind:Visible(val) Funcs:ToggleVisible(Frame, val) end
    function objBind:Destroy()  state.Value = Enum.KeyCode.Unknown  Frame:Destroy() end
    function objBind:Callback(fn)
        if type(fn) == "function" then Callback = fn end
    end
    function objBind:Set(val)
        if typeof(val) == "EnumItem" or type(val) == "number" then
            state.Value = val
            updateDisplay()
        end
    end

    table.insert(Binds, objBind)

    return objBind
end

function splib:ClearAllBinds()
	for i, bind in ipairs(Binds) do
		bind:Set(Enum.KeyCode.Unknown)
	end
end

function Tab:AddParagraph(...)
    local args = {...}

    local Configs
    if #args == 1 and type(args[1]) == "table" then
        Configs = args[1]
    else
        Configs = {
            args[1], -- PName = Configs[1]
            args[2]  -- PDesc = Configs[2]
        }
    end

    local PName = Configs[1] or Configs.Title or "Paragraph"
    local PDesc = Configs[2] or Configs.Text  or ""

    if Configs.IsMobile and not isMobile then
        return nil
     end

    if Configs.IsPC and not isPC then
        return nil
     end
    
    local Frame, LabelFunc = ButtonFrame(Container, PName, PDesc, UDim2.new(1, -20))

    local Paragraph = {}
    function Paragraph:Visible(...) Funcs:ToggleVisible(Frame, ...) end
    function Paragraph:Destroy()   Frame:Destroy() end
    function Paragraph:SetTitle(Val) LabelFunc:SetTitle(GetStr(Val)) end
    function Paragraph:SetDesc(Val)  LabelFunc:SetDesc(GetStr(Val))  end
    function Paragraph:Set(Val1, Val2)
        if Val1 and Val2 then
            LabelFunc:SetTitle(GetStr(Val1))
            LabelFunc:SetDesc(GetStr(Val2))
        elseif Val1 then
            LabelFunc:SetDesc(GetStr(Val1))
        end
    end

    return Paragraph
end
function Tab:AddButton(Configs)
			local BName = Configs[1] or Configs.Name or Configs.Title or "Button!"
			local BDescription = Configs.Desc or Configs.Description or ""
			local Callback = Funcs:GetCallback(Configs, 2)

            if Configs.IsMobile and not isMobile then
                return nil
            end

            if Configs.IsPC and not isPC then
                return nil
            end
			

			local FButton, LabelFunc = ButtonFrame(Container, BName, BDescription, UDim2.new(1, -20))
			
			local ButtonIcon = Create("ImageLabel", FButton, {
				Size = UDim2.new(0, 14, 0, 14),
				Position = UDim2.new(1, -10, 0.5),
				AnchorPoint = Vector2.new(1, 0.5),
				BackgroundTransparency = 1,
				Image = "rbxassetid://10709791437"
			})

		FButton.Activated:Connect(function()
				Funcs:FireCallback(Callback)
			end)

			local Button = {}
			function Button:Visible(...) Funcs:ToggleVisible(FButton, ...) end
			function Button:Destroy() FButton:Destroy() end
			function Button:Callback(...) Funcs:InsertCallback(Callback, ...) end
			function Button:Set(Val1, Val2)
				if type(Val1) == "string" and type(Val2) == "string" then
					LabelFunc:SetTitle(Val1)
					LabelFunc:SetDesc(Val2)
				elseif type(Val1) == "string" then
					LabelFunc:SetTitle(Val1)
				elseif type(Val1) == "function" then
					Callback = Val1
				end
			end
			return Button
		end

function Tab:AddToggle(Configs)
    local TName    = Configs[1] or Configs.Name or Configs.Title or "Toggle"
    local TDesc    = Configs.Desc or Configs.Description or ""
    local Callback = Funcs:GetCallback(Configs, 3)
    local Flag     = Configs[4] or Configs.Flag or false
    local Default  = Configs[2] or Configs.Default or false

    if Flag then
        local saved = LoadFlagValue(Flag)
        if type(saved) == "boolean" then
            Default = saved
        end
    end

    if Configs.IsMobile and not isMobile then return nil end
    if Configs.IsPC     and not isPC     then return nil end

    local container = Configs.__force_container or Container
    local Button, LabelFunc = ButtonFrame(container, TName, TDesc, UDim2.new(1, -38))

    local ToggleHolder = InsertTheme(Create("Frame", Button, {
        Size             = UDim2.new(0, 35, 0, 18),
        Position         = UDim2.new(1, -10, 0.5),
        AnchorPoint      = Vector2.new(1, 0.5),
        BackgroundColor3 = Theme["Color Stroke"],
    }), "Stroke")
    Make("Corner", ToggleHolder, UDim.new(0.5, 0))

    local Slider = Create("Frame", ToggleHolder, {
        BackgroundTransparency = 1,
        Size                   = UDim2.new(0.8, 0, 0.8, 0),
        Position               = UDim2.new(0.5, 0, 0.5, 0),
        AnchorPoint            = Vector2.new(0.5, 0.5),
    })

    local Toggle = InsertTheme(Create("Frame", Slider, {
        Size                   = UDim2.new(0, 12, 0, 12),
        Position               = UDim2.new(Default and 1 or 0, 0, 0.5),
        AnchorPoint            = Vector2.new(Default and 1 or 0, 0.5),
        BackgroundColor3       = Theme["Color Theme"],
        BackgroundTransparency = Default and 0 or 0.8,
    }), "Theme")
    Make("Corner", Toggle, UDim.new(0.5, 0))

    local WaitClick
local function SetToggle(Val)
    if WaitClick then return end
    WaitClick = true
    Default = Val

    if not (control and control.internal) then
        Default = Val
    end

    if Flag and not (control and control.internal) then
        SaveFlagValue(Flag, Val)
    end

        Funcs:FireCallback(Callback, Default)

        if Default then
            CreateTween({Toggle, "Position",           UDim2.new(1, 0, 0.5), 0.25})
            CreateTween({Toggle, "BackgroundTransparency",    0,    0.25})
            CreateTween({Toggle, "AnchorPoint",        Vector2.new(1, 0.5),  0.25})
        else
            CreateTween({Toggle, "Position",           UDim2.new(0, 0, 0.5), 0.25})
            CreateTween({Toggle, "BackgroundTransparency", 0.8,    0.25})
            CreateTween({Toggle, "AnchorPoint",        Vector2.new(0, 0.5),  0.25})
        end

        WaitClick = false
    end

if Flag then
    splib.Flags[Flag] = {
        Value = Default,
        Save  = true,
        Set   = SetToggle,
    }
end

    task.spawn(SetToggle, Default)
    Button.Activated:Connect(function()
        SetToggle(not Default)
    end)

    local ToggleAPI = {}
    function ToggleAPI:Visible(...) Funcs:ToggleVisible(Button, ...) end
    function ToggleAPI:Destroy()     Button:Destroy()           end
    function ToggleAPI:Callback(...) Funcs:InsertCallback(Callback, ...)() end
function ToggleAPI:Set(Val1, control)
    if type(Val1) == "string" and type(control) == "string" then
        LabelFunc:SetTitle(Val1)
        LabelFunc:SetDesc(control)
    elseif type(Val1) == "string" then
        LabelFunc:SetTitle(Val1, false, true)
    elseif type(Val1) == "boolean" then
        if WaitClick and (not control or not control.internal) then
            repeat task.wait() until not WaitClick
        end
        task.spawn(SetToggle, Val1, control)
    elseif type(Val1) == "function" then
        Callback = Val1
    end
end

function ToggleAPI:ForceCallback(val)
    Funcs:FireCallback(Callback, val)
end

ToggleAPI.GetValue = function()
    return Default
end

   table.insert(Toggles, { object = ToggleAPI, default = Default })
    return ToggleAPI
end

function splib:ClearAllToggles()
    for _, entry in ipairs(Toggles) do
        if entry.object and type(entry.object.Set) == "function" then
            entry.object:ForceCallback(false)
        end
    end
end
		function Tab:AddDropdown(Configs)
			local DName = Configs[1] or Configs.Name or Configs.Title or "Dropdown"
			local DDesc = Configs.Desc or Configs.Description or ""
			local DOptions = Configs[2] or Configs.Options or {}
            local Flag = Configs[4] or Configs.Flag or false
            local OpDefault = Configs[3] or Configs.Default
			local DMultiSelect = Configs.MultiSelect or false
			local Callback = Funcs:GetCallback(Configs, 4)
 
            if Configs.IsMobile and not isMobile then
                return nil
            end
 
            if Configs.IsPC and not isPC then
                return nil
            end
 
if not OpDefault and Flag then
    local loaded = LoadDropdownFlag(Flag)
    if loaded then
        OpDefault = loaded
    end
end

if Flag then
    local saved = LoadDropdownFlag(Flag)
    if saved ~= nil then
        OpDefault = saved
    end
end

			local container = Configs.__force_container or Container
            local Button, LabelFunc = ButtonFrame(container, DName, DDesc, UDim2.new(1, -20))
 
			local SelectedFrame = InsertTheme(Create("Frame", Button, {
				Size = UDim2.new(0, 150, 0, 18),
				Position = UDim2.new(1, -10, 0.5),
				AnchorPoint = Vector2.new(1, 0.5),
				BackgroundColor3 = Theme["Color Stroke"]
			}), "Stroke")Make("Corner", SelectedFrame, UDim.new(0, 4))

local function updateSelectedFrameSize()
    local scale = isPC and 0.23 or 0.15
    local mineWidth = isPC and 80 or 60
    local newWidth = math.clamp(Button.AbsoluteSize.X * scale, mineWidth, 150)
    SelectedFrame.Size = UDim2.new(0, newWidth, 0, 18)
end

Button:GetPropertyChangedSignal("AbsoluteSize"):Connect(updateSelectedFrameSize)
updateSelectedFrameSize()

			local ActiveLabel = InsertTheme(Create("TextLabel", SelectedFrame, {
				Size = UDim2.new(0.85, 0, 0.85, 0),
				AnchorPoint = Vector2.new(0.5, 0.5),
				Position = UDim2.new(0.5, 0, 0.5, 0),
				BackgroundTransparency = 1,
				Font = Enum.Font.GothamBold,
				TextScaled = true,
				TextColor3 = Theme["Color Text"],
				Text = "..."
			}), "Text")
 
			local Arrow = Create("ImageLabel", SelectedFrame, {
				Size = UDim2.new(0, 15, 0, 15),
				Position = UDim2.new(0, -5, 0.5),
				AnchorPoint = Vector2.new(1, 0.5),
				Image = "rbxassetid://10709791523",
				BackgroundTransparency = 1
			})
 
			local NoClickFrame = Create("TextButton", DropdownHolder, {
				Name = "AntiClick",
				Size = UDim2.new(1, 0, 1, 0),
				BackgroundTransparency = 1,
				Visible = false,
				Text = ""
			})
 
			local DropFrame = Create("Frame", NoClickFrame, {
				Size = UDim2.new(SelectedFrame.Size.X, 0, 0),
				BackgroundTransparency = 0.1,
				BackgroundColor3 = Color3.fromRGB(255, 255, 255),
				AnchorPoint = Vector2.new(0, 1),
				Name = "DropdownFrame",
				ClipsDescendants = true,
				Active = true
			})Make("Corner", DropFrame)Make("Stroke", DropFrame)Make("Gradient", DropFrame, {Rotation = 60})
 
			local ScrollFrame = InsertTheme(Create("ScrollingFrame", DropFrame, {
				ScrollBarImageColor3 = Theme["Color Theme"],
				Size = UDim2.new(1, 0, 1, 0),
				ScrollBarThickness = 1.5,
				BackgroundTransparency = 1,
				BorderSizePixel = 0,
				CanvasSize = UDim2.new(),
				ScrollingDirection = "Y",
				AutomaticCanvasSize = "Y",
				Active = true
			}, {
				Create("UIPadding", {
					PaddingLeft = UDim.new(0, 8),
					PaddingRight = UDim.new(0, 8),
					PaddingTop = UDim.new(0, 5),
					PaddingBottom = UDim.new(0, 5)
				}), Create("UIListLayout", {
					Padding = UDim.new(0, 4)
				})
			}), "ScrollBar")
 
			local isCooldown = false
			local ScrollSize, WaitClick = 5
 
			local function Disable()
	        if isCooldown then return end
	        isCooldown = true
	        WaitClick = true
				CreateTween({Arrow, "Rotation", 0, 0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out})
				CreateTween({DropFrame, "Size", UDim2.new(0, 152, 0, 0), 0.2, true})
				CreateTween({Arrow, "ImageColor3", Color3.fromRGB(255, 255, 255), 0.2})
				Arrow.Image = "rbxassetid://10709791523"
				NoClickFrame.Visible = false
	WaitClick = false
	task.delay(0.11, function()
		isCooldown = false
	end)
end
 
			local function GetFrameSize()
				return UDim2.fromOffset(152, ScrollSize)
			end
 
			local function CalculateSize()
				local Count = 0
				for _,Frame in pairs(ScrollFrame:GetChildren()) do
					if Frame:IsA("Frame") or Frame.Name == "Option" then
						Count = Count + 1
					end
				end
				ScrollSize = (math.clamp(Count, 0, 10) * 25) + 10
				if NoClickFrame.Visible then
					NoClickFrame.Visible = true
					CreateTween({DropFrame, "Size", GetFrameSize(), 0.2, true})
				end
			end
 
 
local function Minimize()
	if WaitClick or isCooldown then return end
	WaitClick = true
	isCooldown = true
 
	if NoClickFrame.Visible then
		CreateTween({Arrow, "Rotation", 0, 0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out})
		Arrow.Image = "rbxassetid://10709791523"
		CreateTween({Arrow, "ImageColor3", Color3.fromRGB(255, 255, 255), 0.25})
		CreateTween({DropFrame, "Size", UDim2.new(0, 152, 0, 0), 0.25, true})
		NoClickFrame.Visible = false
	else
		NoClickFrame.Visible = true
		Arrow.Image = "rbxassetid://10709791523"
		CreateTween({Arrow, "Rotation", 180, 0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out})
		CreateTween({Arrow, "ImageColor3", Theme["Color Theme"], 0.25})
		CreateTween({DropFrame, "Size", GetFrameSize(), 0.25, true})
	end
 
	task.delay(0.11, function()
		isCooldown = false
	end)
 
	WaitClick = false
end
 
			local function CalculatePos()
				local FramePos = SelectedFrame.AbsolutePosition
				local ScreenSize = ScreenGui.AbsoluteSize
				local ClampX = math.clamp((FramePos.X / UIScale), 0, ScreenSize.X / UIScale - DropFrame.Size.X.Offset)
				local ClampY = math.clamp((FramePos.Y / UIScale) , 0, ScreenSize.Y / UIScale)
 
				local NewPos = UDim2.fromOffset(ClampX, ClampY)
				local AnchorPoint = FramePos.Y > ScreenSize.Y / 1.4 and 1 or ScrollSize > 80 and 0.5 or 0
				DropFrame.AnchorPoint = Vector2.new(0, AnchorPoint)
				CreateTween({DropFrame, "Position", NewPos, 0.1})
			end
			local AddNewOptions, GetOptions, AddOption, RemoveOption, Selected do
                local saved = CheckFlag(Flag) and GetFlag(Flag)
				local Default = type(OpDefault) ~= "table" and {OpDefault} or OpDefault
				local MultiSelect = DMultiSelect
				local Options = {}


                local InitialSelection = saved or Default[1]
				Selected = MultiSelect and {} or InitialSelection
if MultiSelect then
	for index, Value in pairs(saved or Default) do
		if type(index) == "string" and (DOptions[index] or table.find(DOptions, index)) then
			Selected[index] = Value
		elseif DOptions[Value] then
			Selected[Value] = true
		end
	end
end

				local function CallbackSelected()
					SaveDropdownFlag(Flag, MultiSelect and Selected or tostring(Selected))
					Funcs:FireCallback(Callback, Selected)
				end


	local function UpdateLabel()
		if MultiSelect then
			local list = {}
			for index, Value in pairs(Selected) do
				if Value then
					table.insert(list, index)
				end
			end
			ActiveLabel.Text = #list > 0 and table.concat(list, ", ") or Dropdown:Select(saved) or "..."
		else
			ActiveLabel.Text = tostring(Selected or "...")
		end
	end
 
				local function UpdateSelected()
					if MultiSelect then
						for _,v in pairs(Options) do
							local nodes, Stats = v.nodes, v.Stats
							CreateTween({nodes[2], "BackgroundTransparency", Stats and 0 or 0.8, 0.35})
							CreateTween({nodes[2], "Size", Stats and UDim2.fromOffset(4, 12) or UDim2.fromOffset(4, 4), 0.35})
							CreateTween({nodes[3], "TextTransparency", Stats and 0 or 0.4, 0.35})
						end
					else
						for _,v in pairs(Options) do
							local Slt = v.Value == Selected
							local nodes = v.nodes
							CreateTween({nodes[2], "BackgroundTransparency", Slt and 0 or 1, 0.35})
							CreateTween({nodes[2], "Size", Slt and UDim2.fromOffset(4, 14) or UDim2.fromOffset(4, 4), 0.35})
							CreateTween({nodes[3], "TextTransparency", Slt and 0 or 0.4, 0.35})
						end
					end
					UpdateLabel()
				end
 
				local function Select(Option)
					if MultiSelect then
						Option.Stats = not Option.Stats
						Option.LastCB = tick()
 
						Selected[Option.Name] = Option.Stats
						CallbackSelected()
					else
						Option.LastCB = tick()
 
						Selected = Option.Value
						CallbackSelected()
					end
					UpdateSelected()
				end
 
AddOption = function(index, Value)
    if type(index) == "table" then
        Value = index[2]
        index = index[1]
    end

    local Name
    if type(index) == "string" then
        Name = index
    elseif Value ~= nil then
        Name = tostring(Value)
    else
        Name = tostring(index)
    end

    if not Name or Name == "" then return end

    if Value == nil then
        Value = Name
    end

    if Options[Name] then return end

    Options[Name] = {
        index = index,
        Value = Value,
        Name = Name,
        Stats = false,
        LastCB = 0
    }
 
					if MultiSelect then
						local Stats = Selected[Name]
						Selected[Name] = Stats or false
						Options[Name].Stats = Stats
					end
 
					local Button = Make("Button", ScrollFrame, {
						Name = "Option",
						Size = UDim2.new(1, 0, 0, 21),
						Position = UDim2.new(0, 0, 0.5),
						AnchorPoint = Vector2.new(0, 0.5)
					})Make("Corner", Button, UDim.new(0, 4))
 
					local IsSelected = InsertTheme(Create("Frame", Button, {
						Position = UDim2.new(0, 1, 0.5),
						Size = UDim2.new(0, 4, 0, 4),
						BackgroundColor3 = Theme["Color Theme"],
						BackgroundTransparency = 1,
						AnchorPoint = Vector2.new(0, 0.5)
					}), "Theme")Make("Corner", IsSelected, UDim.new(0.5, 0))
 
					local OptioneName = InsertTheme(Create("TextLabel", Button, {
						Size = UDim2.new(1, 0, 1),
						Position = UDim2.new(0, 10),
						Text = Name,
						TextColor3 = Theme["Color Text"],
						Font = Enum.Font.GothamBold,
						TextXAlignment = "Left",
						BackgroundTransparency = 1,
						TextTransparency = 0.4
					}), "Text")
 
					Button.Activated:Connect(function()
						Select(Options[Name])
					end)
 
					Options[Name].nodes = {Button, IsSelected, OptioneName}
				end
 
				RemoveOption = function(index, Value)
					local Name = tostring(type(index) == "string" and index or Value)
					if Options[Name] then
						if MultiSelect then Selected[Name] = nil else Selected = nil end
						Options[Name].nodes[1]:Destroy()
						table.clear(Options[Name])
						Options[Name] = nil
					end
				end

SelectOption = function(indexOrName)
	local name = tostring(indexOrName)

	local opt = Options[name]
	if not opt then
		return
	end

	if MultiSelect then
		opt.Stats = not opt.Stats
		Selected[opt.Name] = opt.Stats
	else
		Selected = opt.Value
	end

	CallbackSelected()
	UpdateSelected()
end
 
				GetOptions = function()
					return Options
				end
 
				AddNewOptions = function(List, Clear)
					if Clear then
						table.foreach(Options, RemoveOption)
					end
					table.foreach(List, AddOption)
					CallbackSelected()
					UpdateSelected()
				end
 
				table.foreach(DOptions, AddOption)
				CallbackSelected()
				UpdateSelected()
			end
 
			Button.Activated:Connect(Minimize)
			NoClickFrame.MouseButton1Down:Connect(Disable)
			NoClickFrame.MouseButton1Click:Connect(Disable)
			MainFrame:GetPropertyChangedSignal("Visible"):Connect(Disable)
			SelectedFrame:GetPropertyChangedSignal("AbsolutePosition"):Connect(CalculatePos)
 
			Button.Activated:Connect(CalculateSize)
			ScrollFrame.ChildAdded:Connect(CalculateSize)
			ScrollFrame.ChildRemoved:Connect(CalculateSize)
			CalculatePos()
			CalculateSize()

            local Dropdown = {}
			function Dropdown:Visible(...) Funcs:ToggleVisible(Button, ...) end
			function Dropdown:Destroy() Button:Destroy() end
			function Dropdown:Callback(...) Funcs:InsertCallback(Callback, ...)(Selected) end
 
function Dropdown:Add(...)
    local NewOptions = {...}
    local list = {}

    if type(NewOptions[1]) == "table" and NewOptions[1][1] ~= nil then
        list = NewOptions[1]
    else
        list = NewOptions
    end

    for _, v in ipairs(list) do
        AddOption(v)
    end
end
function Dropdown:Remove(key)
    local opts = GetOptions()

    if type(key) == "number" then
        local i = 0
        for name, _ in pairs(opts) do
            i = i + 1
            if i == key then
                RemoveOption(name)
                break
            end
        end

    elseif type(key) == "string" then
        if opts[key] then
            RemoveOption(key)
        end
    end
end
function Dropdown:Refresh(newOptions, deleteOld)
    newOptions = newOptions or {}
    local list = newOptions
    
    if deleteOld then
        local opts = GetOptions()
        for name, _ in pairs(opts) do
            RemoveOption(name)
        end
    end
    
    for _, option in ipairs(list) do
        AddOption(option)
    end
    
    if not DMultiSelect then
        local currentValue = Selected
        if currentValue then
            self:Select(currentValue)
        end
    end
    
    if type(CalculateSize) == "function" then
        pcall(CalculateSize)
    end
end
function Dropdown:Select(key)
    local opts = GetOptions()
    
    if opts[key] then
        SelectOption(key)
        return
    end
    
    for name, optionData in pairs(opts) do
        if optionData.Value == key or tostring(optionData.Value) == tostring(key) then
            SelectOption(name)
            return
        end
    end
    
    if type(key) == "number" then
        local i = 0
        for name, _ in pairs(opts) do
            i = i + 1
            if i == key then
                SelectOption(name)
                return
            end
        end
    end
end
function Dropdown:Set(Val1, Clear)
    if type(Val1) == "table" then
        AddNewOptions(Val1, not Clear)

    elseif type(Val1) == "function" then
        Callback = Val1

    elseif type(Val1) == "number" then
        self:Select(Val1)

    elseif type(Val1) == "string" then
        local opts = GetOptions() or {}
        if opts[Val1] then
            self:Select(Val1)
        end
    end

    if type(UpdateSelected) == "function" then
        pcall(UpdateSelected)
    end
end

	Dropdown.GetValue = function()
		if MultiSelect then
			local selectedIndices = {}
			local count = 1
			for _, val in pairs(Options) do
				if Selected[val.Name] then
					table.insert(selectedIndices, count)
				end
				count += 1
			end
			return selectedIndices
		else
			local index = 1
			for _, val in pairs(Options) do
				if val.Name == Selected then
					return index
				end
				index += 1
			end
		end
	end
 
	Dropdown.Flag = Flag
 
			return Dropdown
		end
local SlidersFile = "sliders.json"
local function SaveSliderFlag(flag, value)
    local data = {}
    if isfile(SlidersFile) then
        local ok, existing = pcall(function()
            return HttpService:JSONDecode(readfile(SlidersFile))
        end)
        if ok and type(existing) == "table" then
            data = existing
        end
    end

    data[flag] = value

    local ok, encoded = pcall(function()
        return HttpService:JSONEncode(data)
    end)
    if ok then
        writefile(SlidersFile, encoded)
    end
end

local function LoadSliderFlag(flag)
    if isfile(SlidersFile) then
        local ok, existing = pcall(function()
            return HttpService:JSONDecode(readfile(SlidersFile))
        end)
        if ok and type(existing) == "table" then
            return existing[flag]
        end
    end
    return nil
end
function Tab:AddSlider(Configs)
    local SName = Configs[1] or Configs.Name or Configs.Title or "Slider"
    local SDesc = Configs.Desc or Configs.ValueName or Configs.Description or ""
    local Min = Configs[2] or Configs.MinValue or Configs.Min or 10
    local Max = Configs[3] or Configs.MaxValue or Configs.Max or 100
    local Increase = Configs[4] or Configs.Increase or Configs.Increment or 1
    local Callback = Funcs:GetCallback(Configs, 6)
    local Flag = Configs[7] or Configs.Flag
    local Default = Configs[5] or Configs.Default

    if Flag then
        local saved = LoadSliderFlag(Flag)
        if type(saved) == "number" then
            Default = saved
        end
    end

    if type(Default) ~= "number" then
        Default = (Min + Max) / 2
    end


    if Configs.IsMobile and not isMobile then return nil end
    if Configs.IsPC and not isPC then return nil end

    local Button, LabelFunc = ButtonFrame(Container, SName, SDesc, UDim2.new(1, -20))
    local SliderHolder = Create("TextButton", Button, {
        Size = UDim2.new(0.40, 0, 1),
        Position = UDim2.new(1),
        AnchorPoint = Vector2.new(1, 0),
        AutoButtonColor = false,
        Text = "",
        BackgroundTransparency = 1
    })

    local SliderBar = InsertTheme(Create("Frame", SliderHolder, {
        BackgroundColor3 = Theme["Color Stroke"],
        Size = UDim2.new(1, -20, 0, 6),
        Position = UDim2.new(0.5, 0, 0.5),
        AnchorPoint = Vector2.new(0.5, 0.5)
    }), "Stroke") Make("Corner", SliderBar)

    local Indicator = InsertTheme(Create("Frame", SliderBar, {
        BackgroundColor3 = Theme["Color Theme"],
        Size = UDim2.fromScale(0.3, 1),
        BorderSizePixel = 0
    }), "Theme") Make("Corner", Indicator)

    local SliderIcon = Create("Frame", SliderBar, {
        Size = UDim2.new(0, 6, 0, 12),
        BackgroundColor3 = Color3.fromRGB(220, 220, 220),
        Position = UDim2.fromScale(0.3, 0.5),
        AnchorPoint = Vector2.new(0.5, 0.5),
        BackgroundTransparency = 0.2
    }) Make("Corner", SliderIcon)

    local LabelVal = InsertTheme(Create("TextBox", SliderHolder, {
        Size = UDim2.new(0, 14, 0, 14),
        AnchorPoint = Vector2.new(1, 0.5),
        Position = UDim2.new(0, 0, 0.5),
        BackgroundTransparency = 1,
        TextColor3 = Theme["Color Text"],
        Font = Enum.Font.FredokaOne,
        TextSize = 11
    }), "Text")
    local UIScale = Create("UIScale", LabelVal)
    local BaseMousePos = Create("Frame", SliderBar, { Position = UDim2.new(0,0,0.5,0), Visible = false })

LabelVal.ClearTextOnFocus = false
LabelVal.TextEditable = true

LabelVal.FocusLost:Connect(function(enterPressed)
	if enterPressed then
		local input = tonumber(LabelVal.Text)
		if input then
            if Flag then SaveSliderFlag(Flag, input) end
			input = math.clamp(input, Min, Max)
			input = math.floor(input / Increase + 0.5) * Increase

			LabelVal.Text = string.format("%.1f", input)

			if input ~= Default then
				SetSlider(input)
			else
				local pos = (input - Min) / (Max - Min)
				AnimateIcon(math.clamp(pos, 0, 1))
			end
		else
			LabelVal.Text = string.format("%.1f", Default)
		end
	end
end)

    local function UpdateLabel(NewValue)
        Default = NewValue
        LabelVal.Text = string.format("%.1f", NewValue)
        if Flag then SaveSliderFlag(Flag, NewValue) end
        Funcs:FireCallback(Callback, NewValue)
    end

    local function AnimateIcon(toScale)
        local tweenInfo = TweenInfo.new(0.2, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
        TweenService:Create(SliderIcon, tweenInfo, { Position = UDim2.new(toScale, 0, 0.5, 0) }):Play()
    end

    local function UpdateValues()
        local scale = SliderIcon.Position.X.Scale
        TweenService:Create(Indicator, TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out), { Size = UDim2.new(scale, 0, 1, 0) }):Play()
        local NewValue = scale * (Max - Min) + Min
        UpdateLabel(NewValue)
    end

    SliderHolder.MouseButton1Down:Connect(function()
        CreateTween({SliderIcon, "Transparency", 0, 0.3})
        Container.ScrollingEnabled = false
        while UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton1) do
            local mouseX = Player:GetMouse().X
            local rel = (mouseX - BaseMousePos.AbsolutePosition.X) / SliderBar.AbsoluteSize.X
            local clamped = math.clamp(rel, 0, 1)
            AnimateIcon(clamped)
            task.wait()
        end
        CreateTween({SliderIcon, "Transparency", 0.2, 0.3})
        Container.ScrollingEnabled = true
        if Flag then SaveSliderFlag(Flag, Default) end
    end)

    LabelVal:GetPropertyChangedSignal("Text"):Connect(function()
        UIScale.Scale = 0.3
        CreateTween({UIScale, "Scale", 1.2, 0.1})
        CreateTween({LabelVal, "Rotation", math.random(-1, 1) * 5, 0.15, true})
        CreateTween({UIScale, "Scale", 1, 0.2})
        CreateTween({LabelVal, "Rotation", 0, 0.1})
    end)

    function SetSlider(NewValue)
        if type(NewValue) ~= "number" then return end
        UpdateLabel(NewValue)
        local pos = (NewValue - Min) / (Max - Min)
        AnimateIcon(math.clamp(pos, 0, 1))
    end; SetSlider(Default)

    SliderIcon:GetPropertyChangedSignal("Position"):Connect(UpdateValues)

    local Slider = {}
    function Slider:Set(a, b)
        if a and b then LabelFunc:SetTitle(a); LabelFunc:SetDesc(b)
        elseif type(a) == "string" then LabelFunc:SetTitle(a)
        elseif type(a) == "function" then Callback = a
        elseif type(a) == "number" then SetSlider(a)
        end
    end
    function Slider:Callback(...) Funcs:InsertCallback(Callback, ...)(tonumber(Default)) end
    function Slider:Visible(...) Funcs:ToggleVisible(Button, ...) end
    function Slider:Destroy() Button:Destroy() end
    return Slider
end
local TextBoxesFile = "textboxes.json"
local function SaveTextBoxFlag(flag, value)
    local data = {}
    if isfile(TextBoxesFile) then
        local ok, existing = pcall(function()
            return HttpService:JSONDecode(readfile(TextBoxesFile))
        end)
        if ok and type(existing) == "table" then
            data = existing
        end
    end

    data[flag] = value

    local ok, encoded = pcall(function()
        return HttpService:JSONEncode(data)
    end)
    if ok then
        writefile(TextBoxesFile, encoded)
    end
end

local function LoadTextBoxFlag(flag)
    if isfile(TextBoxesFile) then
        local ok, existing = pcall(function()
            return HttpService:JSONDecode(readfile(TextBoxesFile))
        end)
        if ok and type(existing) == "table" then
            return existing[flag]
        end
    end
    return nil
end
function Tab:AddTextbox(Configs)
    local TName = Configs[1] or Configs.Name or Configs.Title or "Text Box"
    local TDesc = Configs.Desc or Configs.Description or ""
    local TDefault = Configs[2] or Configs.Default or ""
    local Flag = Configs[6] or Configs.Flag
    local TPlaceholderText = Configs[5] or Configs.PlaceholderText or "Input"
    local TClearText = Configs[3] or Configs.ClearText or false
    local Callback = Funcs:GetCallback(Configs, 4)

    if Flag then
        local saved = LoadTextBoxFlag(Flag)
        if saved ~= nil then
            TDefault = saved
        end
    end

    if Configs.IsMobile and not isMobile then
        return nil
    end

    if Configs.IsPC and not isPC then
        return nil
    end

    if type(TDefault) ~= "string" or TDefault:gsub(" ", ""):len() < 1 then
        TDefault = ""
    end

    local Button, LabelFunc = ButtonFrame(Container, TName, TDesc, UDim2.new(1, -38))

    local SelectedFrame = InsertTheme(Create("Frame", Button, {
        Size = UDim2.new(0, 150, 0, 18),
        Position = UDim2.new(1, -10, 0.5, 0),
        AnchorPoint = Vector2.new(1, 0.5),
        BackgroundColor3 = Theme["Color Stroke"]
    }), "Stroke")
    Make("Corner", SelectedFrame, UDim.new(0, 4))

local function updateSelectedFrame2Size()
    local scale = isPC and 0.23 or 0.15
    local mineWidth = isPC and 80 or 60
    local newWidth = math.clamp(Button.AbsoluteSize.X * scale, mineWidth, 150)
    SelectedFrame.Size = UDim2.new(0, newWidth, 0, 18)
end

Button:GetPropertyChangedSignal("AbsoluteSize"):Connect(updateSelectedFrame2Size)
updateSelectedFrame2Size()

    local TextBoxInput = InsertTheme(Create("TextBox", SelectedFrame, {
        Size = UDim2.new(1, 0, 1, 0),
        Position = UDim2.new(0, 0, 0, 0),
        BackgroundTransparency = 1,
        Font = Enum.Font.GothamBold,
        TextScaled = true,
        TextColor3 = Theme["Color Text"],
        ClearTextOnFocus = TClearText,
        PlaceholderText = TPlaceholderText,
        Text = TDefault
    }), "Text")

    local Pencil = Create("ImageLabel", SelectedFrame, {
        Size = UDim2.new(0, 12, 0, 12),
        Position = UDim2.new(0, -5, 0.5, 0),
        AnchorPoint = Vector2.new(1, 0.5),
        Image = "rbxassetid://15637081879",
        BackgroundTransparency = 1
    })

    local TextBox = {}

    local function UpdateSize()
        local padding = 20
        local textWidth = TextBoxInput.TextBounds.X
        local minWidth, maxWidth = 60, 300
        local newWidth = math.clamp(textWidth * 0.55 + padding, minWidth, maxWidth)

        TweenService:Create(
            SelectedFrame,
            TweenInfo.new(0.25, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),
            {Size = UDim2.new(0, newWidth, 0, 18)}
        ):Play()
    end

    TextBoxInput:GetPropertyChangedSignal("Text"):Connect(UpdateSize)

    TextBoxInput.Focused:Connect(function()
        CreateTween({Pencil, "ImageColor3", Theme["Color Theme"], 0.4})
    end)
    TextBoxInput.FocusLost:Connect(function()
        CreateTween({Pencil, "ImageColor3", Color3.fromRGB(255, 255, 255), 0.4})
    end)

    local function Input()
        local Text = TextBoxInput.Text
        if Text:gsub(" ", ""):len() > 0 then
            if TextBox.OnChanging then
                Text = TextBox.OnChanging(Text) or Text
            end
        if Flag then
            SaveTextBoxFlag(Flag, Text)
        end
            Funcs:FireCallback(Callback, Text)
            TextBoxInput.Text = Text
        end
    end

    TextBoxInput.FocusLost:Connect(Input)
    Input()

    TextBox.OnChanging = false
    function TextBox:Visible(...) Funcs:ToggleVisible(Button, ...) end
    function TextBox:Destroy() Button:Destroy() end

    return TextBox
end
local ColorPickersFile = "colorpickers.json"
local function SaveColorPickerFlag(flag, color: Color3)
	local data = {}
	if isfile(ColorPickersFile) then
		local ok, existing = pcall(function()
			return HttpService:JSONDecode(readfile(ColorPickersFile))
		end)
		if ok and type(existing) == "table" then
			data = existing
		end
	end

	data[flag] = {
		r = color.R,
		g = color.G,
		b = color.B
	}

	local ok, encoded = pcall(function()
		return HttpService:JSONEncode(data)
	end)
	if ok then
		writefile(ColorPickersFile, encoded)
	end
end

local function LoadColorPickerFlag(flag): Color3?
	if isfile(ColorPickersFile) then
		local ok, existing = pcall(function()
			return HttpService:JSONDecode(readfile(ColorPickersFile))
		end)
		if ok and type(existing) == "table" then
			local saved = existing[flag]
			if saved and saved.r and saved.g and saved.b then
				return Color3.new(saved.r, saved.g, saved.b)
			end
		end
	end
	return nil
end
function Tab:AddColorpicker(Configs)
    local TName    = Configs[1] or Configs.Name or Configs.Title    or "Color Picker"
    local TDesc    = Configs.Desc or Configs.Description            or ""
    local TDefault = Configs[2] or Configs.Default or Color3.fromRGB(255,255,255)
    local Flag = Configs[6] or Configs.Flag
    local Callback = Configs.Callback
 
if Flag then
	local saved = LoadColorPickerFlag(Flag)
	if saved ~= nil then
		TDefault = saved
	end
end

    if Configs.IsMobile and not isMobile then return end
    if Configs.IsPC     and not isPC     then return end
 
    local ColorH, ColorS, ColorV = Color3.toHSV(TDefault)

    local Frame, LabelFunc = ButtonFrame(Container, TName, TDesc, UDim2.new(1, -20, 0, 25))
 
    local ColorBox = InsertTheme(Create("TextButton", Frame, {
        Name = "ColorBox",
        Text = "",
        Font = Enum.Font.GothamBold,
        TextSize = 14,
        TextColor3 = Theme["Color Text"],
        Size = UDim2.new(0, 40, 0, 18),
        Position = UDim2.new(1, -10, 0, 3),
        AnchorPoint = Vector2.new(1, 0),
        BackgroundColor3 = TDefault,
        BackgroundTransparency = 0,
    }), "Stroke")
    Make("Corner", ColorBox, UDim.new(0.25, 0))
 
local NoClickFrame = Create("TextButton", CustomColorHolder, {
	Name = "AntiClick",
	Size = UDim2.new(1, 0, 1, 0),
	BackgroundTransparency = 1,
	Text = "",
	ZIndex = 2,
	Visible = false
})

local CustomColorFrame = Create("Frame", NoClickFrame, {
	Size = UDim2.new(0, 160, 0, 120),
	Position = UDim2.new(1, -23, 0, 25),
	AnchorPoint = Vector2.new(1, 0),
	BackgroundColor3 = Color3.fromRGB(30, 30, 30),
	Name = "CustomColorFrame",
	Visible = false,
	ZIndex = 5
})
Make("Corner", CustomColorFrame)
Make("Stroke", CustomColorFrame)
Make("Gradient", CustomColorFrame, {Rotation = 60})

local ColorCodeBox = Create("TextBox", CustomColorFrame, {
    Name = "ColorCodeBox",
    Size = UDim2.new(0.30, -10, 0, 20),
    Position = UDim2.new(0, 10, 1, -40),
    BackgroundColor3 = Color3.fromRGB(50, 50, 50),
    TextColor3 = Color3.fromRGB(255, 255, 255),
    Font = Enum.Font.Gotham,
    TextSize = 14,
    TextXAlignment = Enum.TextXAlignment.Center,
    ClearTextOnFocus = false,
    ZIndex = 6,
    Text  = "",
})
Make("Corner", ColorCodeBox, UDim.new(0, 4))

local ColorCodeBoxUD = Create("TextBox", CustomColorFrame, {
    Name = "ColorCodeBoxUD",
    Size = UDim2.new(0.40, -10, 0, 20),
    Position = UDim2.new(0, 155, 1, -40),
    BackgroundColor3 = Color3.fromRGB(50, 50, 50),
    TextColor3 = Color3.fromRGB(255, 255, 255),
    Font = Enum.Font.Gotham,
    TextSize = 14,
    TextXAlignment = Enum.TextXAlignment.Center,
    ClearTextOnFocus = false,
    ZIndex = 6,
    Text  = "",
})
Make("Corner", ColorCodeBoxUD, UDim.new(0, 4))

local ColorCanvas = Create("Frame", CustomColorFrame, {
    Name = "ColorCanvas",
    Size = UDim2.new(.60, -2, .60, -2),
    Position = UDim2.new(0, 15, 0, 15),
    BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1),
    BackgroundTransparency = 0,
    ZIndex = 6
})
Make("Corner", ColorCanvas)

local ColorSelection = Create("ImageLabel", ColorCanvas, {
    Name = "ColorSelection",
    Size = UDim2.new(0, 12, 0, 12),
    AnchorPoint = Vector2.new(0.5, 0.5),
    Position = UDim2.new(ColorS, 0, 1 - ColorV, 0),
    BackgroundTransparency = 1,
    Image = "rbxassetid://4805639000",
    ZIndex = 7
})
Make("Corner", ColorSelection)

local HueBar = Create("Frame", CustomColorFrame, {
    Name = "HueBar",
    Size = UDim2.new(0, 15, .60, -15),
    Position = UDim2.new(1, -35, 0, 15),
    BackgroundTransparency = 0,
    ZIndex = 8
})
Make("Corner", HueBar)

local satGrad = Create("UIGradient", ColorCanvas, {
    Rotation = 90,
    Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.new(1, 1, 1)),
        ColorSequenceKeypoint.new(1, Color3.new(1, 1, 1)),
    },
    Transparency = NumberSequence.new{
        NumberSequenceKeypoint.new(0, 0),
        NumberSequenceKeypoint.new(1, 1),
    }
})

local HueGradient = Create("UIGradient", HueBar, {
    Rotation = 270,
    Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0,   Color3.fromRGB(255,   0,   4)),
        ColorSequenceKeypoint.new(0.2, Color3.fromRGB(234, 255,   0)),
        ColorSequenceKeypoint.new(0.4, Color3.fromRGB( 21, 255,   0)),
        ColorSequenceKeypoint.new(0.6, Color3.fromRGB(  0, 255, 255)),
        ColorSequenceKeypoint.new(0.8, Color3.fromRGB(  0,  17, 255)),
        ColorSequenceKeypoint.new(0.9, Color3.fromRGB(255,   0, 251)),
        ColorSequenceKeypoint.new(1,   Color3.fromRGB(255,   0,   4)),
    }
})

local HueSelection = Create("ImageLabel", HueBar, {
    Name = "HueSelection",
    Size = UDim2.new(0, 12, 0, 12),
    AnchorPoint = Vector2.new(0.5, 0.5),
    Position = UDim2.new(0.5, 0, 1 - ColorH, 0),
    BackgroundTransparency = 1,
    Image = "rbxassetid://4805639000",
    ZIndex = 9
})
Make("Corner", HueSelection)

    local Arrow = Create("ImageLabel", ColorBox, {
        Size = UDim2.new(0, 12, 0, 12),
        Position = UDim2.new(0, 13, 0.5, 0),
        AnchorPoint = Vector2.new(0, 0.5),
        Image = "rbxassetid://10709791523",
        Rotation = -90,
        BackgroundTransparency = 1,
        ImageColor3 = Color3.fromRGB(255, 255, 255),
        ZIndex = 6
    })

local PresetsList = Create("ScrollingFrame", Frame, {
    Size = UDim2.new(1, -110, 0, 25),
    Position = UDim2.new(0, 59, 0, 0),
    BackgroundTransparency = 1,
    ScrollBarThickness = 1,
    ScrollBarImageTransparency = 0.7,
    ScrollBarImageColor3 = Theme["Color Theme"],
    ScrollingDirection = "X" 
})
Make("Corner", PresetsList, UDim.new(0, 4))
InsertTheme(PresetsList, "Stroke")

PresetsList.ScrollingDirection = Enum.ScrollingDirection.X
PresetsList.ClipsDescendants = true

local ListLayout = Create("UIListLayout", PresetsList, {
    FillDirection = Enum.FillDirection.Horizontal,
    HorizontalAlignment = Enum.HorizontalAlignment.Left,
    VerticalAlignment = Enum.VerticalAlignment.Center,
    SortOrder = Enum.SortOrder.LayoutOrder,
    Padding = UDim.new(0, 5)
})

ListLayout:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
    PresetsList.CanvasSize = UDim2.new(0, ListLayout.AbsoluteContentSize.X + 6, 0, 0)
end)

local presetColors = {
    Color3.fromRGB(255, 255, 255), -- White
    Color3.fromRGB(  0,   0,   0), -- Black
    Color3.fromRGB(255,   0,   0), -- Red
    Color3.fromRGB(255, 242,   0), -- Yellow
    Color3.fromRGB(  0, 162, 232), -- Blue
    Color3.fromRGB(128,   0, 128), -- Purple
    Color3.fromRGB(  0, 255, 127), -- Spring Green
    Color3.fromRGB(255, 105, 180), -- Hot Pink
    Color3.fromRGB(255, 140,   0), -- Orange
    Color3.fromRGB( 75,   0, 130), -- Indigo
    Color3.fromRGB( 64, 224, 208), -- Turquoise
    "Rainbow",
}

local RunS = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
 
local isCooldown = false
local WaitClick  = false
local ScrollSize = 0

local function rgbToHex(c)
    local r = math.floor(c.R * 255)
    local g = math.floor(c.G * 255)
    local b = math.floor(c.B * 255)
    return string.format("#%02X%02X%02X", r, g, b)
end

local function rgbToRGBString(color)
    local r = math.floor(color.R * 255)
    local g = math.floor(color.G * 255)
    local b = math.floor(color.B * 255)
    return string.format("(%d, %3d, %3d)", r, g, b)
end

local function hexToColor3(hex)
	if hex:sub(1,1) == "#" then hex = hex:sub(2) end
	if #hex ~= 6 then return nil end
	local r = tonumber(hex:sub(1,2), 16)
	local g = tonumber(hex:sub(3,4), 16)
	local b = tonumber(hex:sub(5,6), 16)
	if not (r and g and b) then return nil end
	return Color3.fromRGB(r, g, b)
end

local function rgbStringToColor3(text)
	local r, g, b = text:match("%(?%s*(%d+)%s*,%s*(%d+)%s*,%s*(%d+)%s*%)?")
	r, g, b = tonumber(r), tonumber(g), tonumber(b)
	if not (r and g and b) then return nil end
	if r > 255 or g > 255 or b > 255 then return nil end
	return Color3.fromRGB(r, g, b)
end

local function updateColor()
    ColorCanvas.BackgroundColor3 = Color3.fromHSV(ColorH, 1, 1)
    local newC = Color3.fromHSV(ColorH, ColorS, ColorV)
    ColorBox.BackgroundColor3 = newC
    ColorCodeBox.Text = rgbToHex(newC)
    ColorCodeBoxUD.Text = rgbToRGBString(newC)
    if Flag then
        SaveColorPickerFlag(Flag, newC)
    end
    Callback(newC)
end

ColorCodeBox.FocusLost:Connect(function()
	local newColor = hexToColor3(ColorCodeBox.Text)
	if newColor then
		local h, s, v = Color3.toHSV(newColor)
		ColorH, ColorS, ColorV = h, s, v
		updateColor()
        ColorSelection.Position = UDim2.new(ColorS, 0, 1 - ColorV, 0)
	end
end)

ColorCodeBoxUD.FocusLost:Connect(function()
	local newColor = rgbStringToColor3(ColorCodeBoxUD.Text)
	if newColor then
		local h, s, v = Color3.toHSV(newColor)
		ColorH, ColorS, ColorV = h, s, v
		updateColor()
        ColorSelection.Position = UDim2.new(ColorS, 0, 1 - ColorV, 0)
	end
end)

ColorCanvas.InputBegan:Connect(function(inp)
    if inp.UserInputType == Enum.UserInputType.MouseButton1 then
        local conn = RunS.RenderStepped:Connect(function()
            local m = UIS:GetMouseLocation()
            local x = math.clamp((m.X - ColorCanvas.AbsolutePosition.X) / ColorCanvas.AbsoluteSize.X, 0, 1)
            local y = math.clamp((m.Y - ColorCanvas.AbsolutePosition.Y) / ColorCanvas.AbsoluteSize.Y, 0, 1)
            ColorSelection.Position = UDim2.new(x, 0, y, 0)
            ColorS = x
            ColorV = 1 - y
            updateColor()
        end)
        ColorCanvas.InputEnded:Connect(function(e)
            if e.UserInputType == Enum.UserInputType.MouseButton1 then conn:Disconnect() end
        end)
    end
end)

HueBar.InputBegan:Connect(function(inp)
    if inp.UserInputType == Enum.UserInputType.MouseButton1 then
        local conn = RunS.RenderStepped:Connect(function()
            local m = UIS:GetMouseLocation()
            local y = math.clamp((m.Y - HueBar.AbsolutePosition.Y) / HueBar.AbsoluteSize.Y, 0, 1)
            HueSelection.Position = UDim2.new(0.5, 0, y, 0)
            ColorH = 1 - y
            updateColor()
        end)
        HueBar.InputEnded:Connect(function(e)
            if e.UserInputType == Enum.UserInputType.MouseButton1 then conn:Disconnect() end
        end)
    end
end)

local function GetCustomFrameSize()
    return UDim2.fromOffset(CustomColorFrame.Size.X.Offset, ScrollSize)
end

local function CalculateCustomColorPos()
	local BoxPos = ColorBox.AbsolutePosition
	local ScreenSize = ScreenGui.AbsoluteSize

	local offsetY = 35

	local anchorY = (BoxPos.Y > ScreenSize.Y / 1.4) and 1 or 0
	local anchorX = (BoxPos.X > ScreenSize.X / 2) and 1 or 0

	local adjustedY = (anchorY == 1)
		and (BoxPos.Y - offsetY)
		or  (BoxPos.Y + offsetY)

	local ClampX = math.clamp(BoxPos.X / UIScale, 0, ScreenSize.X / UIScale - CustomColorFrame.Size.X.Offset)
	local ClampY = math.clamp(adjustedY / UIScale, 0, ScreenSize.Y / UIScale - CustomColorFrame.Size.Y.Offset)

	local NewPos = UDim2.fromOffset(ClampX, ClampY)

	CustomColorFrame.AnchorPoint = Vector2.new(anchorX, anchorY)
	CreateTween({CustomColorFrame, "Position", NewPos, 0.1})
end

local buttons = {}
local isCooldown = false
 
local Colorpicker = {
    Value = TDefault,
    Type = "Colorpicker"
}

local cooldownTime = .6
local lastActionTime = 0

local function closeColors()
if tick() - lastActionTime < cooldownTime then
    return
end
lastActionTime = tick()

    local total = #buttons
    for k = 1, total do
        local idx = total - k + 1
        local b = buttons[idx]

        delay((k-1) * 0.05, function()
            CreateTween({b, "Size", UDim2.new(0, 0, 0, 18), 0.2})
            CreateTween({b, "BackgroundTransparency", 1, 0.2})
            delay(0.2, function()
                if b and b.Parent then
                    b:Destroy()
                end
            end)
        end)
    end

    delay((#buttons-1) * 0.05 + 0.2, function()
        buttons = {}
        PresetsList.Visible = false
    end)
end

local function openColors()

if tick() - lastActionTime < cooldownTime then
    return
end
lastActionTime = tick()

    if #buttons > 0 then return end

    buttons = {}
    PresetsList.Visible = true

    for i, col in ipairs(presetColors) do
        local btn = Create("TextButton", PresetsList, {
            Name = "ChooseColor" .. i,
            Size = UDim2.new(0, 20, 0, 18),
            BackgroundColor3 = (typeof(col) == "string") and Color3.new(1,1,1) or col,
            BackgroundTransparency = 1,
            Text = "",
            BorderSizePixel = 0,
            ZIndex = 5,
            LayoutOrder = i
        })

        Make("Corner", btn, UDim.new(0.25, 0))

        if col == "Rainbow" then
            local gradient = Instance.new("UIGradient")
            gradient.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 0, 0)),
                ColorSequenceKeypoint.new(0.17, Color3.fromRGB(255, 165, 0)),
                ColorSequenceKeypoint.new(0.33, Color3.fromRGB(255, 255, 0)),
                ColorSequenceKeypoint.new(0.50, Color3.fromRGB(0, 255, 0)),
                ColorSequenceKeypoint.new(0.67, Color3.fromRGB(0, 127, 255)),
                ColorSequenceKeypoint.new(0.83, Color3.fromRGB(139, 0, 255)),
                ColorSequenceKeypoint.new(1.00, Color3.fromRGB(255, 0, 255)),
            })
            gradient.Rotation = 45
            gradient.Parent = btn

            btn.Activated:Connect(function()
                CalculateCustomColorPos()
                ColorCodeBox.Visible = false
                ColorCodeBoxUD.Visible = false
                ColorCanvas.Visible = false
                ColorSelection.Visible = false
                HueBar.Visible = false
                HueSelection.Visible = false
                
                if isCooldown then return end
                isCooldown = true
                WaitClick = true

                if NoClickFrame.Visible then
                    CreateTween({CustomColorFrame, "Size", UDim2.new(0, 260, 0, 0), 0.25})
                    task.delay(0.2, function()
                        CustomColorFrame.Visible = false
                        NoClickFrame.Visible = false
                        isCooldown = false
                        WaitClick = false
                    end)
                else
                    CustomColorFrame.Size = UDim2.new(0, 260, 0, 0)
                    CustomColorFrame.Visible = true
                    NoClickFrame.Visible = true
                    ColorCodeBox.Visible = true
                    ColorCodeBoxUD.Visible = true
                    ColorCanvas.Visible = true
                    ColorSelection.Visible = true
                    HueBar.Visible = true
                    HueSelection.Visible = true
                    CreateTween({CustomColorFrame, "Size", UDim2.new(0, 260, 0, 220), 0.25})
                    task.delay(0.2, function()
                        isCooldown = false
                        WaitClick = false
                    end)
                end
            end)
        else
            btn.Activated:Connect(function()
                if Flag then SaveColorPickerFlag(Flag, col) end
                Colorpicker:SetColor(col)
                CreateTween({Arrow, "Rotation", -90, 0.25})
                CreateTween({Arrow, "ImageColor3", Color3.fromRGB(255, 255, 255), 0.25})
            end)
        end

        table.insert(buttons, btn)

        delay((i - 1) * 0.05, function()
            CreateTween({btn, "Size", UDim2.new(0, 20, 0, 18), 0.2})
            CreateTween({btn, "BackgroundTransparency", 0, 0.2})
        end)
    end
end

ColorBox.Activated:Connect(function()
        if isCooldown then return end
        isCooldown = true

    local isOpen = #buttons > 0

    if isOpen then
        closeColors()
        CreateTween({Arrow, "Rotation", -90, 0.25})
        CreateTween({Arrow, "ImageColor3", Color3.fromRGB(255, 255, 255), 0.25})
    else
        openColors()
        CreateTween({Arrow, "Rotation", 90, 0.25})
        CreateTween({Arrow, "ImageColor3", Theme["Color Theme"], 0.25})
    end

    task.delay(0.3, function()
        isCooldown = false
    end)
end)

    Frame.Activated:Connect(function()
        if isCooldown then return end
        isCooldown = true

        local isOpen = buttons[1] and buttons[1].Parent
 
        if isOpen then
            closeColors()
            CreateTween({Arrow, "Rotation", -90, 0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out})
            CreateTween({Arrow, "ImageColor3", Color3.fromRGB(255, 255, 255), 0.25})
        else
            openColors()
            CreateTween({Arrow, "Rotation", 90, 0.25, Enum.EasingStyle.Quad, Enum.EasingDirection.Out})
            CreateTween({Arrow, "ImageColor3", Theme["Color Theme"], 0.25})
        end
 
        task.delay(0.3, function()
            isCooldown = false
        end)
    end)
 
function Colorpicker:Set(Value)
    self.Value = Value
    ColorBox.BackgroundColor3 = Value
    if typeof(Callback) == "function" then
        Callback(Value)
    end
end
 
function Colorpicker:SetColor(col)
    self:Set(col)
end

function Colorpicker:Destroy()
    Frame:Destroy()
end
 
function Colorpicker:Visible(state)
    Frame.Visible = state
end
 
function Colorpicker:Callback(fn)
    if typeof(fn) == "function" then
        Callback = fn
    end
end
    return Colorpicker
end
		function Tab:AddDiscordInvite(Configs)
			local Title = Configs[1] or Configs.Name or Configs.Title or "Discord"
			local Desc = Configs.Desc or Configs.Description or ""
			local Logo = Configs[2] or Configs.Logo or ""
			local Invite = Configs[3] or Configs.Invite or ""
			
			local InviteHolder = Create("Frame", Container, {
				Size = UDim2.new(1, 0, 0, 80),
				Name = "Option",
				BackgroundTransparency = 1
			})
			
			local InviteLabel = Create("TextLabel", InviteHolder, {
				Size = UDim2.new(1, 0, 0, 15),
				Position = UDim2.new(0, 5),
				TextColor3 = Color3.fromRGB(40, 150, 255),
				Font = Enum.Font.GothamBold,
				TextXAlignment = "Left",
				BackgroundTransparency = 1,
				TextSize = 10,
				Text = Invite
			})
			
			local FrameHolder = InsertTheme(Create("Frame", InviteHolder, {
				Size = UDim2.new(1, 0, 0, 65),
				AnchorPoint = Vector2.new(0, 1),
				Position = UDim2.new(0, 0, 1),
				BackgroundColor3 = Theme["Color Hub 2"]
			}), "Frame")Make("Corner", FrameHolder)
			
			local ImageLabel = Create("ImageLabel", FrameHolder, {
				Size = UDim2.new(0, 30, 0, 30),
				Position = UDim2.new(0, 7, 0, 7),
				Image = Logo,
				BackgroundTransparency = 1
			})Make("Corner", ImageLabel, UDim.new(0, 4))Make("Stroke", ImageLabel)
			
			local LTitle = InsertTheme(Create("TextLabel", FrameHolder, {
				Size = UDim2.new(1, -52, 0, 15),
				Position = UDim2.new(0, 44, 0, 7),
				Font = Enum.Font.GothamBold,
				TextColor3 = Theme["Color Text"],
				TextXAlignment = "Left",
				BackgroundTransparency = 1,
				TextSize = 10,
				Text = Title
			}), "Text")
			
			local LDesc = InsertTheme(Create("TextLabel", FrameHolder, {
				Size = UDim2.new(1, -52, 0, 0),
				Position = UDim2.new(0, 44, 0, 22),
				TextWrapped = "Y",
				AutomaticSize = "Y",
				Font = Enum.Font.Gotham,
				TextColor3 = Theme["Color Dark Text"],
				TextXAlignment = "Left",
				BackgroundTransparency = 1,
				TextSize = 8,
				Text = Desc
			}), "DarkText")
			
			local JoinButton = Create("TextButton", FrameHolder, {
				Size = UDim2.new(1, -14, 0, 16),
				AnchorPoint = Vector2.new(0.5, 1),
				Position = UDim2.new(0.5, 0, 1, -7),
				Text = "Join",
				Font = Enum.Font.GothamBold,
				TextSize = 12,
				TextColor3 = Color3.fromRGB(220, 220, 220),
				BackgroundColor3 = Color3.fromRGB(50, 150, 50)
			})Make("Corner", JoinButton, UDim.new(0, 5))
			
			local ClickDelay
			JoinButton.Activated:Connect(function()
				setclipboard(Invite)
				if ClickDelay then return end
				
				ClickDelay = true
				SetProps(JoinButton, {
					Text = "Copied to Clipboard",
					BackgroundColor3 = Color3.fromRGB(100, 100, 100),
					TextColor3 = Color3.fromRGB(150, 150, 150)
				})task.wait(5)
				SetProps(JoinButton, {
					Text = "Join",
					BackgroundColor3 = Color3.fromRGB(50, 150, 50),
					TextColor3 = Color3.fromRGB(220, 220, 220)
				})ClickDelay = false
			end)
			
			local DiscordInvite = {}
			function DiscordInvite:Destroy() InviteHolder:Destroy() end
			function DiscordInvite:Visible(...) Funcs:ToggleVisible(InviteHolder, ...) end
			return DiscordInvite
		end

local ScreenFind = CoreGui:FindFirstChild(ScreenGui.Name)
if ScreenFind and ScreenFind ~= ScreenGui then
    for _, conn in ipairs(bindConnections) do
        if typeof(conn) == "RBXScriptConnection" and conn.Connected then
            conn:Disconnect()
        end
    end
    table.clear(bindConnections)

    splib:ClearAllBinds()

if shouldClearToggles then
    splib:ClearAllToggles()
end

    ScreenFind:Destroy()
end

-- local SettingTab

Tab:AddSection({
    Name = "Settings",
    __force_container = SettingTab
})

Tab:AddDropdown({
    Name     = "UI Size",
    Options  = {"Small", "Medium", "Large"},
    Default  = savedSize,
    Flag = "UISize",
    Callback = function(v)
        local offset = isMobile and -200 or 0
        if v == "Small" then
            splib:SetScale(700 + offset)
        elseif v == "Medium" then
            splib:SetScale(600 + offset)
        elseif v == "Large" then
            splib:SetScale(500 + offset)
        end
    end,
    __force_container = SettingTab
})

Tab:AddDropdown({
    Name = "UI Theme",
    Options = {"Red", "Darker", "Dark", "Purple","NeonBlue", "Sunset", "Ocean", "RoseGold", "Matrix", "Green", "Orange", "Pink", "Gold", "Cyan"},
    Default = splib.Save.Theme or "Dark",
    Callback = function(selectedTheme)
        splib:SetTheme(selectedTheme)
        splib.Save.Theme = selectedTheme
        SaveJson("sp library v2.json", splib.Save)
    end,
    __force_container = SettingTab
})

Tab:AddToggle({
  Name = "Toggle UI Icon Protection",
  Default = true,
  Flag = "UIProtection",
  Callback = function(enabled)
    if enabled then
      checkBounds()
      enableBoundaryProtection()
    else
      disableBoundaryProtection()
    end
  end,
    __force_container = SettingTab
})

Tab:AddToggle({
    Name = "Sidebar Hover Expand",
    Flag = "SidebarHover",
    Default = true,
    IsPC = true,
    Callback = function(enabled)
        if enabled then
            enableSidebarHover()
            tweenControlSizeX(minClamp)
        else
            disableSidebarHover()
        end
    end,
    __force_container = SettingTab
})

		return Tab
	end
	MinimizeButton.Activated:Connect(Window.MinimizeBtn)
	return Window
end

return splib
